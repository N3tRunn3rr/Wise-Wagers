{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nvar EAGER_METHODS = ['refetch', 'reobserve', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\nexport function useLazyQuery(query, options) {\n  var _a;\n  var abortControllersRef = useRef(new Set());\n  var execOptionsRef = useRef();\n  var merged = execOptionsRef.current ? mergeOptions(options, execOptionsRef.current) : options;\n  var internalState = useInternalState(useApolloClient(options && options.client), (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query);\n  var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), {\n    skip: !execOptionsRef.current\n  }));\n  var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy || internalState.getDefaultFetchPolicy();\n  var result = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current\n  });\n  var eagerMethods = useMemo(function () {\n    var eagerMethods = {};\n    var _loop_1 = function (key) {\n      var method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    };\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n      _loop_1(key);\n    }\n    return eagerMethods;\n  }, []);\n  Object.assign(result, eagerMethods);\n  useEffect(function () {\n    return function () {\n      abortControllersRef.current.forEach(function (controller) {\n        controller.abort();\n      });\n    };\n  }, []);\n  var execute = useCallback(function (executeOptions) {\n    var controller = new AbortController();\n    abortControllersRef.current.add(controller);\n    execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), {\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy\n    }) : {\n      fetchPolicy: initialFetchPolicy\n    };\n    var promise = internalState.asyncUpdate(controller.signal).then(function (queryResult) {\n      abortControllersRef.current.delete(controller);\n      return Object.assign(queryResult, eagerMethods);\n    });\n    promise.catch(function () {\n      abortControllersRef.current.delete(controller);\n    });\n    return promise;\n  }, []);\n  return [execute, result];\n}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useRef","mergeOptions","useInternalState","useApolloClient","EAGER_METHODS","useLazyQuery","query","options","abortControllersRef","Set","execOptionsRef","merged","current","internalState","client","_a","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","key","method","create","forceUpdate","apply","arguments","_i","EAGER_METHODS_1","length","forEach","controller","abort","execute","executeOptions","AbortController","add","fetchPolicy","promise","asyncUpdate","signal","then","queryResult","delete","catch"],"sources":["/Users/kenjifleming/course-challenges/Perfect-Parlay/perfect-parlay/client/node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { mergeOptions } from '../../utilities';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables extends OperationVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const abortControllersRef = useRef(new Set<AbortController>());\n\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const merged = execOptionsRef.current ? mergeOptions(options, execOptionsRef.current) : options;\n\n  const internalState = useInternalState<TData, TVariables>(\n    useApolloClient(options && options.client),\n    merged?.query ?? query\n  );\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  useEffect(() => {\n    return () => {\n      abortControllersRef.current.forEach((controller) => {\n        controller.abort();\n      });\n    }\n  }, [])\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    const controller = new AbortController();\n    abortControllersRef.current.add(controller);\n\n    execOptionsRef.current = executeOptions ? {\n      ...executeOptions,\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n    } : {\n      fetchPolicy: initialFetchPolicy,\n    };\n\n    const promise = internalState\n      .asyncUpdate(controller.signal) // Like internalState.forceUpdate, but returns a Promise.\n      .then(queryResult => {\n        abortControllersRef.current.delete(controller);\n\n        return Object.assign(queryResult, eagerMethods);\n      });\n\n    promise.catch(() => {\n      abortControllersRef.current.delete(controller);\n    });\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"],"mappings":";AAEA,SAASA,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,QAAQ,OAAO;AAG/D,SAASC,YAAY,QAAQ,0BAAkB;AAM/C,SAASC,gBAAgB,QAAQ,eAAa;AAC9C,SAASC,eAAe,QAAQ,sBAAoB;AAIpD,IAAMC,aAAa,GAAG,CACpB,SAAS,EACT,WAAW,EACX,WAAW,EACX,aAAa,EACb,cAAc,EACd,iBAAiB,CACT;AAEV,OAAM,SAAUC,YAAYA,CAC1BC,KAA0D,EAC1DC,OAAiD;;EAEjD,IAAMC,mBAAmB,GAAGR,MAAM,CAAC,IAAIS,GAAG,EAAmB,CAAC;EAE9D,IAAMC,cAAc,GAAGV,MAAM,EAAoD;EACjF,IAAMW,MAAM,GAAGD,cAAc,CAACE,OAAO,GAAGX,YAAY,CAACM,OAAO,EAAEG,cAAc,CAACE,OAAO,CAAC,GAAGL,OAAO;EAE/F,IAAMM,aAAa,GAAGX,gBAAgB,CACpCC,eAAe,CAACI,OAAO,IAAIA,OAAO,CAACO,MAAM,CAAC,EAC1C,CAAAC,EAAA,GAAAJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEL,KAAK,cAAAS,EAAA,cAAAA,EAAA,GAAIT,KAAK,CACvB;EAED,IAAMU,cAAc,GAAGH,aAAa,CAACI,QAAQ,CAAAC,QAAA,CAAAA,QAAA,KACxCP,MAAM;IACTQ,IAAI,EAAE,CAACT,cAAc,CAACE;EAAO,GAC7B;EAEF,IAAMQ,kBAAkB,GACtBJ,cAAc,CAACK,UAAU,CAACd,OAAO,CAACa,kBAAkB,IACpDP,aAAa,CAACS,qBAAqB,EAAE;EAEvC,IAAMC,MAAM,GACVC,MAAM,CAACC,MAAM,CAACT,cAAc,EAAE;IAC5BU,MAAM,EAAE,CAAC,CAAChB,cAAc,CAACE;GAC1B,CAAC;EAGJ,IAAMe,YAAY,GAAG5B,OAAO,CAAC;IAC3B,IAAM4B,YAAY,GAAwB,EAAE;4BACjCC,GAAG;MACZ,IAAMC,MAAM,GAAGN,MAAM,CAACK,GAAG,CAAC;MAC1BD,YAAY,CAACC,GAAG,CAAC,GAAG;QAClB,IAAI,CAAClB,cAAc,CAACE,OAAO,EAAE;UAC3BF,cAAc,CAACE,OAAO,GAAGY,MAAM,CAACM,MAAM,CAAC,IAAI,CAAC;UAE5CjB,aAAa,CAACkB,WAAW,EAAE;;QAE7B,OAAOF,MAAM,CAACG,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;MACtC,CAAC;;IATH,KAAkB,IAAAC,EAAA,IAAa,EAAbC,eAAA,GAAA/B,aAAa,EAAb8B,EAAA,GAAAC,eAAA,CAAAC,MAAa,EAAbF,EAAA,EAAa;MAA1B,IAAMN,GAAG,GAAAO,eAAA,CAAAD,EAAA;cAAHN,GAAG;;IAYd,OAAOD,YAAY;EACrB,CAAC,EAAE,EAAE,CAAC;EAENH,MAAM,CAACC,MAAM,CAACF,MAAM,EAAEI,YAAY,CAAC;EAEnC7B,SAAS,CAAC;IACR,OAAO;MACLU,mBAAmB,CAACI,OAAO,CAACyB,OAAO,CAAC,UAACC,UAAU;QAC7CA,UAAU,CAACC,KAAK,EAAE;MACpB,CAAC,CAAC;IACJ,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,OAAO,GAAG3C,WAAW,CAEzB,UAAA4C,cAAc;IACd,IAAMH,UAAU,GAAG,IAAII,eAAe,EAAE;IACxClC,mBAAmB,CAACI,OAAO,CAAC+B,GAAG,CAACL,UAAU,CAAC;IAE3C5B,cAAc,CAACE,OAAO,GAAG6B,cAAc,GAAEvB,QAAA,CAAAA,QAAA,KACpCuB,cAAc;MACjBG,WAAW,EAAEH,cAAc,CAACG,WAAW,IAAIxB;IAAkB,KAC3D;MACFwB,WAAW,EAAExB;KACd;IAED,IAAMyB,OAAO,GAAGhC,aAAa,CAC1BiC,WAAW,CAACR,UAAU,CAACS,MAAM,CAAC,CAC9BC,IAAI,CAAC,UAAAC,WAAW;MACfzC,mBAAmB,CAACI,OAAO,CAACsC,MAAM,CAACZ,UAAU,CAAC;MAE9C,OAAOd,MAAM,CAACC,MAAM,CAACwB,WAAW,EAAEtB,YAAY,CAAC;IACjD,CAAC,CAAC;IAEJkB,OAAO,CAACM,KAAK,CAAC;MACZ3C,mBAAmB,CAACI,OAAO,CAACsC,MAAM,CAACZ,UAAU,CAAC;IAChD,CAAC,CAAC;IAEF,OAAOO,OAAO;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACL,OAAO,EAAEjB,MAAM,CAAC;AAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}