{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isNonNullType } from '../../type/definition.mjs';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nexport function VariablesInAllowedPositionRule(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n        var _iterator = _createForOfIteratorHelper(usages),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _step.value,\n              node = _step$value.node,\n              type = _step$value.type,\n              defaultValue = _step$value.defaultValue;\n            var varName = node.name.value;\n            var varDef = varDefMap[varName];\n            if (varDef && type) {\n              // A var type is allowed if it is the same or more strict (e.g. is\n              // a subtype of) than the expected type. It can be more strict if\n              // the variable type is non-null when the expected type is nullable.\n              // If both are list types, the variable item type can be more strict\n              // than the expected item type (contravariant).\n              var schema = context.getSchema();\n              var varType = typeFromAST(schema, varDef.type);\n              if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n                var varTypeStr = inspect(varType);\n                var typeStr = inspect(type);\n                context.reportError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" of type \\\"\").concat(varTypeStr, \"\\\" used in position expecting type \\\"\").concat(typeStr, \"\\\".\"), {\n                  nodes: [varDef, node]\n                }));\n              }\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    var hasLocationDefaultValue = locationDefaultValue !== undefined;\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n    var nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n  return isTypeSubTypeOf(schema, varType, locationType);\n}","map":{"version":3,"names":["inspect","GraphQLError","Kind","isNonNullType","isTypeSubTypeOf","typeFromAST","VariablesInAllowedPositionRule","context","varDefMap","Object","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","value","node","type","defaultValue","varName","name","varDef","schema","getSchema","varType","allowedVariableUsage","varTypeStr","typeStr","reportError","concat","nodes","err","e","f","VariableDefinition","variable","varDefaultValue","locationType","locationDefaultValue","hasNonNullVariableDefaultValue","kind","NULL","hasLocationDefaultValue","undefined","nullableLocationType","ofType"],"sources":["/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs"],"sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isNonNullType } from '../../type/definition.mjs';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nexport function VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node, type, defaultValue } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = typeFromAST(schema, varDef.type);\n\n            if (\n              varType &&\n              !allowedVariableUsage(\n                schema,\n                varType,\n                varDef.defaultValue,\n                type,\n                defaultValue,\n              )\n            ) {\n              const varTypeStr = inspect(varType);\n              const typeStr = inspect(type);\n              context.reportError(\n                new GraphQLError(\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\n                  {\n                    nodes: [varDef, node],\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    },\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(\n  schema,\n  varType,\n  varDefaultValue,\n  locationType,\n  locationDefaultValue,\n) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    const hasNonNullVariableDefaultValue =\n      varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}