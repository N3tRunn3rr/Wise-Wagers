{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nexport function NoUnusedVariablesRule(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var _iterator = _createForOfIteratorHelper(usages),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var node = _step.value.node;\n            variableNameUsed[node.name.value] = true;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        for (var _i = 0, _variableDefs = variableDefs; _i < _variableDefs.length; _i++) {\n          var variableDef = _variableDefs[_i];\n          var variableName = variableDef.variable.name.value;\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(operation.name ? \"Variable \\\"$\".concat(variableName, \"\\\" is never used in operation \\\"\").concat(operation.name.value, \"\\\".\") : \"Variable \\\"$\".concat(variableName, \"\\\" is never used.\"), {\n              nodes: variableDef\n            }));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","NoUnusedVariablesRule","context","variableDefs","OperationDefinition","enter","leave","operation","variableNameUsed","Object","create","usages","getRecursiveVariableUsages","_iterator","_createForOfIteratorHelper","_step","s","n","done","node","value","name","err","e","f","_i","_variableDefs","length","variableDef","variableName","variable","reportError","concat","nodes","VariableDefinition","def","push"],"sources":["/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nexport function NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".`\n                  : `Variable \"$${variableName}\" is never used.`,\n                {\n                  nodes: variableDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    },\n  };\n}\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,8BAA8B;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACC,OAAO,EAAE;EAC7C,IAAIC,YAAY,GAAG,EAAE;EACrB,OAAO;IACLC,mBAAmB,EAAE;MACnBC,KAAK,WAAAA,MAAA,EAAG;QACNF,YAAY,GAAG,EAAE;MACnB,CAAC;MAEDG,KAAK,WAAAA,MAACC,SAAS,EAAE;QACf,IAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QAC5C,IAAMC,MAAM,GAAGT,OAAO,CAACU,0BAA0B,CAACL,SAAS,CAAC;QAAC,IAAAM,SAAA,GAAAC,0BAAA,CAEtCH,MAAM;UAAAI,KAAA;QAAA;UAA7B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA+B;YAAA,IAAlBC,IAAI,GAAAJ,KAAA,CAAAK,KAAA,CAAJD,IAAI;YACfX,gBAAgB,CAACW,IAAI,CAACE,IAAI,CAACD,KAAK,CAAC,GAAG,IAAI;UAC1C;QAAC,SAAAE,GAAA;UAAAT,SAAA,CAAAU,CAAA,CAAAD,GAAA;QAAA;UAAAT,SAAA,CAAAW,CAAA;QAAA;QAED,SAAAC,EAAA,MAAAC,aAAA,GAA0BvB,YAAY,EAAAsB,EAAA,GAAAC,aAAA,CAAAC,MAAA,EAAAF,EAAA,IAAE;UAAnC,IAAMG,WAAW,GAAAF,aAAA,CAAAD,EAAA;UACpB,IAAMI,YAAY,GAAGD,WAAW,CAACE,QAAQ,CAACT,IAAI,CAACD,KAAK;UAEpD,IAAIZ,gBAAgB,CAACqB,YAAY,CAAC,KAAK,IAAI,EAAE;YAC3C3B,OAAO,CAAC6B,WAAW,CACjB,IAAI/B,YAAY,CACdO,SAAS,CAACc,IAAI,kBAAAW,MAAA,CACIH,YAAY,sCAAAG,MAAA,CAAiCzB,SAAS,CAACc,IAAI,CAACD,KAAK,0BAAAY,MAAA,CACjEH,YAAY,sBAAkB,EAChD;cACEI,KAAK,EAAEL;YACT,CAAC,CACF,CACF;UACH;QACF;MACF;IACF,CAAC;IAEDM,kBAAkB,WAAAA,mBAACC,GAAG,EAAE;MACtBhC,YAAY,CAACiC,IAAI,CAACD,GAAG,CAAC;IACxB;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}