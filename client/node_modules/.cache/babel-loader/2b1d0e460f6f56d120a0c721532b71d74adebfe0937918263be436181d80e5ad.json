{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nexport function NoUnusedFragmentsRule(context) {\n  var operationDefs = [];\n  var fragmentDefs = [];\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n    Document: {\n      leave: function leave() {\n        var fragmentNameUsed = Object.create(null);\n        for (var _i = 0, _operationDefs = operationDefs; _i < _operationDefs.length; _i++) {\n          var operation = _operationDefs[_i];\n          var _iterator = _createForOfIteratorHelper(context.getRecursivelyReferencedFragments(operation)),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var fragment = _step.value;\n              fragmentNameUsed[fragment.name.value] = true;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n        for (var _i2 = 0, _fragmentDefs = fragmentDefs; _i2 < _fragmentDefs.length; _i2++) {\n          var fragmentDef = _fragmentDefs[_i2];\n          var fragName = fragmentDef.name.value;\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" is never used.\"), {\n              nodes: fragmentDef\n            }));\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","NoUnusedFragmentsRule","context","operationDefs","fragmentDefs","OperationDefinition","node","push","FragmentDefinition","Document","leave","fragmentNameUsed","Object","create","_i","_operationDefs","length","operation","_iterator","_createForOfIteratorHelper","getRecursivelyReferencedFragments","_step","s","n","done","fragment","value","name","err","e","f","_i2","_fragmentDefs","fragmentDef","fragName","reportError","concat","nodes"],"sources":["/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nexport function NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(\n            operation,\n          )) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(\n              new GraphQLError(`Fragment \"${fragName}\" is never used.`, {\n                nodes: fragmentDef,\n              }),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,8BAA8B;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACC,OAAO,EAAE;EAC7C,IAAMC,aAAa,GAAG,EAAE;EACxB,IAAMC,YAAY,GAAG,EAAE;EACvB,OAAO;IACLC,mBAAmB,WAAAA,oBAACC,IAAI,EAAE;MACxBH,aAAa,CAACI,IAAI,CAACD,IAAI,CAAC;MACxB,OAAO,KAAK;IACd,CAAC;IAEDE,kBAAkB,WAAAA,mBAACF,IAAI,EAAE;MACvBF,YAAY,CAACG,IAAI,CAACD,IAAI,CAAC;MACvB,OAAO,KAAK;IACd,CAAC;IAEDG,QAAQ,EAAE;MACRC,KAAK,WAAAA,MAAA,EAAG;QACN,IAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QAE5C,SAAAC,EAAA,MAAAC,cAAA,GAAwBZ,aAAa,EAAAW,EAAA,GAAAC,cAAA,CAAAC,MAAA,EAAAF,EAAA,IAAE;UAAlC,IAAMG,SAAS,GAAAF,cAAA,CAAAD,EAAA;UAAA,IAAAI,SAAA,GAAAC,0BAAA,CACKjB,OAAO,CAACkB,iCAAiC,CAC9DH,SAAS,CACV;YAAAI,KAAA;UAAA;YAFD,KAAAH,SAAA,CAAAI,CAAA,MAAAD,KAAA,GAAAH,SAAA,CAAAK,CAAA,IAAAC,IAAA,GAEG;cAAA,IAFQC,QAAQ,GAAAJ,KAAA,CAAAK,KAAA;cAGjBf,gBAAgB,CAACc,QAAQ,CAACE,IAAI,CAACD,KAAK,CAAC,GAAG,IAAI;YAC9C;UAAC,SAAAE,GAAA;YAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;UAAA;YAAAV,SAAA,CAAAY,CAAA;UAAA;QACH;QAEA,SAAAC,GAAA,MAAAC,aAAA,GAA0B5B,YAAY,EAAA2B,GAAA,GAAAC,aAAA,CAAAhB,MAAA,EAAAe,GAAA,IAAE;UAAnC,IAAME,WAAW,GAAAD,aAAA,CAAAD,GAAA;UACpB,IAAMG,QAAQ,GAAGD,WAAW,CAACN,IAAI,CAACD,KAAK;UAEvC,IAAIf,gBAAgB,CAACuB,QAAQ,CAAC,KAAK,IAAI,EAAE;YACvChC,OAAO,CAACiC,WAAW,CACjB,IAAInC,YAAY,eAAAoC,MAAA,CAAcF,QAAQ,wBAAoB;cACxDG,KAAK,EAAEJ;YACT,CAAC,CAAC,CACH;UACH;QACF;MACF;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}