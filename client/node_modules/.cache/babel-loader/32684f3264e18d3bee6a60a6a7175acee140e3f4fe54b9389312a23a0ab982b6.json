{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { isInputObjectType, isLeafType, isListType, isNonNullType } from '../type/definition.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Unknown       |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n  if (valueNode.kind === Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n    var variableValue = variables[variableName];\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n    return variableValue;\n  }\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n  if (isListType(type)) {\n    var itemType = type.ofType;\n    if (valueNode.kind === Kind.LIST) {\n      var coercedValues = [];\n      var _iterator = _createForOfIteratorHelper(valueNode.values),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var itemNode = _step.value;\n          if (isMissingVariable(itemNode, variables)) {\n            // If an array contains a missing variable, it is either coerced to\n            // null or if the item type is non-null, it considered invalid.\n            if (isNonNullType(itemType)) {\n              return; // Invalid: intentionally return no value.\n            }\n\n            coercedValues.push(null);\n          } else {\n            var itemValue = valueFromAST(itemNode, itemType, variables);\n            if (itemValue === undefined) {\n              return; // Invalid: intentionally return no value.\n            }\n\n            coercedValues.push(itemValue);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return coercedValues;\n    }\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var coercedObj = Object.create(null);\n    var fieldNodes = keyMap(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n    for (var _i = 0, _Object$values = Object.values(type.getFields()); _i < _Object$values.length; _i++) {\n      var field = _Object$values[_i];\n      var fieldNode = fieldNodes[field.name];\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n    return coercedObj;\n  }\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    var result;\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);\n}","map":{"version":3,"names":["inspect","invariant","keyMap","Kind","isInputObjectType","isLeafType","isListType","isNonNullType","valueFromAST","valueNode","type","variables","kind","VARIABLE","variableName","name","value","undefined","variableValue","NULL","ofType","itemType","LIST","coercedValues","_iterator","_createForOfIteratorHelper","values","_step","s","n","done","itemNode","isMissingVariable","push","itemValue","err","e","f","coercedValue","OBJECT","coercedObj","Object","create","fieldNodes","fields","field","_i","_Object$values","getFields","length","fieldNode","defaultValue","fieldValue","result","parseLiteral","_error"],"sources":["/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/graphql/utilities/valueFromAST.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Unknown       |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    const variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      const coercedValues = [];\n\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedObj = Object.create(null);\n    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return (\n    valueNode.kind === Kind.VARIABLE &&\n    (variables == null || variables[valueNode.name.value] === undefined)\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}