{"ast":null,"code":"import _objectSpread from \"/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { parse } from '../language/parser.mjs';\nimport { specifiedDirectives } from '../type/directives.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDL } from '../validation/validate.mjs';\nimport { extendSchemaImpl } from './extendSchema.mjs';\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query,\n * Mutation and Subscription.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n */\nexport function buildASTSchema(documentAST, options) {\n  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(false, 'Must provide valid Document AST.');\n  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {\n    assertValidSDL(documentAST);\n  }\n  var emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: Object.create(null),\n    extensionASTNodes: [],\n    assumeValid: false\n  };\n  var config = extendSchemaImpl(emptySchemaConfig, documentAST, options);\n  if (config.astNode == null) {\n    var _iterator = _createForOfIteratorHelper(config.types),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var type = _step.value;\n        switch (type.name) {\n          // Note: While this could make early assertions to get the correctly\n          // typed values below, that would throw immediately while type system\n          // validation with validateSchema() will produce more actionable results.\n          case 'Query':\n            // @ts-expect-error validated in `validateSchema`\n            config.query = type;\n            break;\n          case 'Mutation':\n            // @ts-expect-error validated in `validateSchema`\n            config.mutation = type;\n            break;\n          case 'Subscription':\n            // @ts-expect-error validated in `validateSchema`\n            config.subscription = type;\n            break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  var directives = [].concat(_toConsumableArray(config.directives), _toConsumableArray(specifiedDirectives.filter(function (stdDirective) {\n    return config.directives.every(function (directive) {\n      return directive.name !== stdDirective.name;\n    });\n  })));\n  return new GraphQLSchema(_objectSpread(_objectSpread({}, config), {}, {\n    directives: directives\n  }));\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nexport function buildSchema(source, options) {\n  var document = parse(source, {\n    noLocation: options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacyFragmentVariables: options === null || options === void 0 ? void 0 : options.allowLegacyFragmentVariables\n  });\n  return buildASTSchema(document, {\n    assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid\n  });\n}","map":{"version":3,"names":["devAssert","Kind","parse","specifiedDirectives","GraphQLSchema","assertValidSDL","extendSchemaImpl","buildASTSchema","documentAST","options","kind","DOCUMENT","assumeValid","assumeValidSDL","emptySchemaConfig","description","undefined","types","directives","extensions","Object","create","extensionASTNodes","config","astNode","_iterator","_createForOfIteratorHelper","_step","s","n","done","type","value","name","query","mutation","subscription","err","e","f","concat","_toConsumableArray","filter","stdDirective","every","directive","_objectSpread","buildSchema","source","document","noLocation","allowLegacyFragmentVariables"],"sources":["/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/graphql/utilities/buildASTSchema.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { parse } from '../language/parser.mjs';\nimport { specifiedDirectives } from '../type/directives.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDL } from '../validation/validate.mjs';\nimport { extendSchemaImpl } from './extendSchema.mjs';\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query,\n * Mutation and Subscription.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n */\nexport function buildASTSchema(documentAST, options) {\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\n    devAssert(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    assertValidSDL(documentAST);\n  }\n\n  const emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: Object.create(null),\n    extensionASTNodes: [],\n    assumeValid: false,\n  };\n  const config = extendSchemaImpl(emptySchemaConfig, documentAST, options);\n\n  if (config.astNode == null) {\n    for (const type of config.types) {\n      switch (type.name) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        case 'Query':\n          // @ts-expect-error validated in `validateSchema`\n          config.query = type;\n          break;\n\n        case 'Mutation':\n          // @ts-expect-error validated in `validateSchema`\n          config.mutation = type;\n          break;\n\n        case 'Subscription':\n          // @ts-expect-error validated in `validateSchema`\n          config.subscription = type;\n          break;\n      }\n    }\n  }\n\n  const directives = [\n    ...config.directives, // If specified directives were not explicitly declared, add them.\n    ...specifiedDirectives.filter((stdDirective) =>\n      config.directives.every(\n        (directive) => directive.name !== stdDirective.name,\n      ),\n    ),\n  ];\n  return new GraphQLSchema({ ...config, directives });\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nexport function buildSchema(source, options) {\n  const document = parse(source, {\n    noLocation:\n      options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacyFragmentVariables:\n      options === null || options === void 0\n        ? void 0\n        : options.allowLegacyFragmentVariables,\n  });\n  return buildASTSchema(document, {\n    assumeValidSDL:\n      options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid:\n      options === null || options === void 0 ? void 0 : options.assumeValid,\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}