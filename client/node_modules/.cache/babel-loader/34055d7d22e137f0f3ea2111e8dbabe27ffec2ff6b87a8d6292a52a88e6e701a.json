{"ast":null,"code":"import _slicedToArray from \"/Users/kenjifleming/course-challenges/Perfect-Parlay/perfect-parlay/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/kenjifleming/course-challenges/Perfect-Parlay/perfect-parlay/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/kenjifleming/course-challenges/Perfect-Parlay/perfect-parlay/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isEnumType, isInputObjectType, isInterfaceType, isListType, isNamedType, isNonNullType, isObjectType, isRequiredArgument, isRequiredInputField, isScalarType, isUnionType } from '../type/definition.mjs';\nimport { isSpecifiedScalarType } from '../type/scalars.mjs';\nimport { astFromValue } from './astFromValue.mjs';\nimport { sortValueNode } from './sortValueNode.mjs';\nvar BreakingChangeType;\n(function (BreakingChangeType) {\n  BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';\n  BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';\n  BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';\n  BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';\n  BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] = 'REQUIRED_INPUT_FIELD_ADDED';\n  BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] = 'IMPLEMENTED_INTERFACE_REMOVED';\n  BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';\n  BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';\n  BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';\n  BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';\n  BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';\n  BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';\n  BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';\n  BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] = 'REQUIRED_DIRECTIVE_ARG_ADDED';\n  BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] = 'DIRECTIVE_REPEATABLE_REMOVED';\n  BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] = 'DIRECTIVE_LOCATION_REMOVED';\n})(BreakingChangeType || (BreakingChangeType = {}));\nexport { BreakingChangeType };\nvar DangerousChangeType;\n(function (DangerousChangeType) {\n  DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';\n  DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';\n  DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] = 'OPTIONAL_INPUT_FIELD_ADDED';\n  DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';\n  DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] = 'IMPLEMENTED_INTERFACE_ADDED';\n  DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';\n})(DangerousChangeType || (DangerousChangeType = {}));\nexport { DangerousChangeType };\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nexport function findBreakingChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in BreakingChangeType;\n  });\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in DangerousChangeType;\n  });\n}\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [].concat(_toConsumableArray(findTypeChanges(oldSchema, newSchema)), _toConsumableArray(findDirectiveChanges(oldSchema, newSchema)));\n}\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());\n  var _iterator = _createForOfIteratorHelper(directivesDiff.removed),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var oldDirective = _step.value;\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_REMOVED,\n        description: \"\".concat(oldDirective.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var _iterator2 = _createForOfIteratorHelper(directivesDiff.persisted),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n        _oldDirective = _step2$value[0],\n        newDirective = _step2$value[1];\n      var argsDiff = diff(_oldDirective.args, newDirective.args);\n      var _iterator3 = _createForOfIteratorHelper(argsDiff.added),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var newArg = _step3.value;\n          if (isRequiredArgument(newArg)) {\n            schemaChanges.push({\n              type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n              description: \"A required arg \".concat(newArg.name, \" on directive \").concat(_oldDirective.name, \" was added.\")\n            });\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      var _iterator4 = _createForOfIteratorHelper(argsDiff.removed),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var oldArg = _step4.value;\n          schemaChanges.push({\n            type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n            description: \"\".concat(oldArg.name, \" was removed from \").concat(_oldDirective.name, \".\")\n          });\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      if (_oldDirective.isRepeatable && !newDirective.isRepeatable) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,\n          description: \"Repeatable flag was removed from \".concat(_oldDirective.name, \".\")\n        });\n      }\n      var _iterator5 = _createForOfIteratorHelper(_oldDirective.locations),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var location = _step5.value;\n          if (!newDirective.locations.includes(location)) {\n            schemaChanges.push({\n              type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n              description: \"\".concat(location, \" was removed from \").concat(_oldDirective.name, \".\")\n            });\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return schemaChanges;\n}\nfunction findTypeChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var typesDiff = diff(Object.values(oldSchema.getTypeMap()), Object.values(newSchema.getTypeMap()));\n  var _iterator6 = _createForOfIteratorHelper(typesDiff.removed),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var oldType = _step6.value;\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_REMOVED,\n        description: isSpecifiedScalarType(oldType) ? \"Standard scalar \".concat(oldType.name, \" was removed because it is not referenced anymore.\") : \"\".concat(oldType.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  var _iterator7 = _createForOfIteratorHelper(typesDiff.persisted),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n        _oldType = _step7$value[0],\n        newType = _step7$value[1];\n      if (isEnumType(_oldType) && isEnumType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findEnumTypeChanges(_oldType, newType)));\n      } else if (isUnionType(_oldType) && isUnionType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findUnionTypeChanges(_oldType, newType)));\n      } else if (isInputObjectType(_oldType) && isInputObjectType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findInputObjectTypeChanges(_oldType, newType)));\n      } else if (isObjectType(_oldType) && isObjectType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findFieldChanges(_oldType, newType)).concat(_toConsumableArray(findImplementedInterfacesChanges(_oldType, newType))));\n      } else if (isInterfaceType(_oldType) && isInterfaceType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findFieldChanges(_oldType, newType)).concat(_toConsumableArray(findImplementedInterfacesChanges(_oldType, newType))));\n      } else if (_oldType.constructor !== newType.constructor) {\n        schemaChanges.push({\n          type: BreakingChangeType.TYPE_CHANGED_KIND,\n          description: \"\".concat(_oldType.name, \" changed from \") + \"\".concat(typeKindName(_oldType), \" to \").concat(typeKindName(newType), \".\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  return schemaChanges;\n}\nfunction findInputObjectTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(Object.values(oldType.getFields()), Object.values(newType.getFields()));\n  var _iterator8 = _createForOfIteratorHelper(fieldsDiff.added),\n    _step8;\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var newField = _step8.value;\n      if (isRequiredInputField(newField)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n          description: \"A required field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n        });\n      } else {\n        schemaChanges.push({\n          type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n          description: \"An optional field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n  var _iterator9 = _createForOfIteratorHelper(fieldsDiff.removed),\n    _step9;\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var oldField = _step9.value;\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_REMOVED,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n  var _iterator10 = _createForOfIteratorHelper(fieldsDiff.persisted),\n    _step10;\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var _step10$value = _slicedToArray(_step10.value, 2),\n        _oldField = _step10$value[0],\n        _newField = _step10$value[1];\n      var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);\n      if (!isSafe) {\n        schemaChanges.push({\n          type: BreakingChangeType.FIELD_CHANGED_KIND,\n          description: \"\".concat(oldType.name, \".\").concat(_oldField.name, \" changed type from \") + \"\".concat(String(_oldField.type), \" to \").concat(String(_newField.type), \".\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n  return schemaChanges;\n}\nfunction findUnionTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n  var _iterator11 = _createForOfIteratorHelper(possibleTypesDiff.added),\n    _step11;\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var newPossibleType = _step11.value;\n      schemaChanges.push({\n        type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n        description: \"\".concat(newPossibleType.name, \" was added to union type \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n  var _iterator12 = _createForOfIteratorHelper(possibleTypesDiff.removed),\n    _step12;\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var oldPossibleType = _step12.value;\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n        description: \"\".concat(oldPossibleType.name, \" was removed from union type \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n  return schemaChanges;\n}\nfunction findEnumTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var valuesDiff = diff(oldType.getValues(), newType.getValues());\n  var _iterator13 = _createForOfIteratorHelper(valuesDiff.added),\n    _step13;\n  try {\n    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n      var newValue = _step13.value;\n      schemaChanges.push({\n        type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n        description: \"\".concat(newValue.name, \" was added to enum type \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator13.e(err);\n  } finally {\n    _iterator13.f();\n  }\n  var _iterator14 = _createForOfIteratorHelper(valuesDiff.removed),\n    _step14;\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var oldValue = _step14.value;\n      schemaChanges.push({\n        type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n        description: \"\".concat(oldValue.name, \" was removed from enum type \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n  return schemaChanges;\n}\nfunction findImplementedInterfacesChanges(oldType, newType) {\n  var schemaChanges = [];\n  var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n  var _iterator15 = _createForOfIteratorHelper(interfacesDiff.added),\n    _step15;\n  try {\n    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n      var newInterface = _step15.value;\n      schemaChanges.push({\n        type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,\n        description: \"\".concat(newInterface.name, \" added to interfaces implemented by \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator15.e(err);\n  } finally {\n    _iterator15.f();\n  }\n  var _iterator16 = _createForOfIteratorHelper(interfacesDiff.removed),\n    _step16;\n  try {\n    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n      var oldInterface = _step16.value;\n      schemaChanges.push({\n        type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,\n        description: \"\".concat(oldType.name, \" no longer implements interface \").concat(oldInterface.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator16.e(err);\n  } finally {\n    _iterator16.f();\n  }\n  return schemaChanges;\n}\nfunction findFieldChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(Object.values(oldType.getFields()), Object.values(newType.getFields()));\n  var _iterator17 = _createForOfIteratorHelper(fieldsDiff.removed),\n    _step17;\n  try {\n    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n      var oldField = _step17.value;\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_REMOVED,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator17.e(err);\n  } finally {\n    _iterator17.f();\n  }\n  var _iterator18 = _createForOfIteratorHelper(fieldsDiff.persisted),\n    _step18;\n  try {\n    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n      var _step18$value = _slicedToArray(_step18.value, 2),\n        _oldField2 = _step18$value[0],\n        newField = _step18$value[1];\n      schemaChanges.push.apply(schemaChanges, _toConsumableArray(findArgChanges(oldType, _oldField2, newField)));\n      var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);\n      if (!isSafe) {\n        schemaChanges.push({\n          type: BreakingChangeType.FIELD_CHANGED_KIND,\n          description: \"\".concat(oldType.name, \".\").concat(_oldField2.name, \" changed type from \") + \"\".concat(String(_oldField2.type), \" to \").concat(String(newField.type), \".\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator18.e(err);\n  } finally {\n    _iterator18.f();\n  }\n  return schemaChanges;\n}\nfunction findArgChanges(oldType, oldField, newField) {\n  var schemaChanges = [];\n  var argsDiff = diff(oldField.args, newField.args);\n  var _iterator19 = _createForOfIteratorHelper(argsDiff.removed),\n    _step19;\n  try {\n    for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n      var oldArg = _step19.value;\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_REMOVED,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(oldArg.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator19.e(err);\n  } finally {\n    _iterator19.f();\n  }\n  var _iterator20 = _createForOfIteratorHelper(argsDiff.persisted),\n    _step20;\n  try {\n    for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n      var _step20$value = _slicedToArray(_step20.value, 2),\n        _oldArg = _step20$value[0],\n        newArg = _step20$value[1];\n      var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);\n      if (!isSafe) {\n        schemaChanges.push({\n          type: BreakingChangeType.ARG_CHANGED_KIND,\n          description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed type from \") + \"\".concat(String(_oldArg.type), \" to \").concat(String(newArg.type), \".\")\n        });\n      } else if (_oldArg.defaultValue !== undefined) {\n        if (newArg.defaultValue === undefined) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" defaultValue was removed.\")\n          });\n        } else {\n          // Since we looking only for client's observable changes we should\n          // compare default values in the same representation as they are\n          // represented inside introspection.\n          var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);\n          var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n          if (oldValueStr !== newValueStr) {\n            schemaChanges.push({\n              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n              description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed defaultValue from \").concat(oldValueStr, \" to \").concat(newValueStr, \".\")\n            });\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _iterator20.e(err);\n  } finally {\n    _iterator20.f();\n  }\n  var _iterator21 = _createForOfIteratorHelper(argsDiff.added),\n    _step21;\n  try {\n    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n      var _newArg = _step21.value;\n      if (isRequiredArgument(_newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_ARG_ADDED,\n          description: \"A required arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n        });\n      } else {\n        schemaChanges.push({\n          type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n          description: \"An optional arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator21.e(err);\n  } finally {\n    _iterator21.f();\n  }\n  return schemaChanges;\n}\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      isListType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) ||\n      // moving from nullable to non-null of the same underlying type is safe\n      isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  }\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n  return (\n    // if they're both named types, see if their names are equivalent\n    isNamedType(newType) && oldType.name === newType.name ||\n    // moving from nullable to non-null of the same underlying type is safe\n    isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n  );\n}\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return isListType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  }\n  if (isNonNullType(oldType)) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) ||\n      // moving from non-null to nullable of the same underlying type is safe\n      !isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  } // if they're both named types, see if their names are equivalent\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\nfunction stringifyValue(value, type) {\n  var ast = astFromValue(value, type);\n  ast != null || invariant(false);\n  return print(sortValueNode(ast));\n}\nfunction diff(oldArray, newArray) {\n  var added = [];\n  var removed = [];\n  var persisted = [];\n  var oldMap = keyMap(oldArray, function (_ref) {\n    var name = _ref.name;\n    return name;\n  });\n  var newMap = keyMap(newArray, function (_ref2) {\n    var name = _ref2.name;\n    return name;\n  });\n  var _iterator22 = _createForOfIteratorHelper(oldArray),\n    _step22;\n  try {\n    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n      var oldItem = _step22.value;\n      var newItem = newMap[oldItem.name];\n      if (newItem === undefined) {\n        removed.push(oldItem);\n      } else {\n        persisted.push([oldItem, newItem]);\n      }\n    }\n  } catch (err) {\n    _iterator22.e(err);\n  } finally {\n    _iterator22.f();\n  }\n  var _iterator23 = _createForOfIteratorHelper(newArray),\n    _step23;\n  try {\n    for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n      var _newItem = _step23.value;\n      if (oldMap[_newItem.name] === undefined) {\n        added.push(_newItem);\n      }\n    }\n  } catch (err) {\n    _iterator23.e(err);\n  } finally {\n    _iterator23.f();\n  }\n  return {\n    added: added,\n    persisted: persisted,\n    removed: removed\n  };\n}","map":{"version":3,"names":["inspect","invariant","keyMap","print","isEnumType","isInputObjectType","isInterfaceType","isListType","isNamedType","isNonNullType","isObjectType","isRequiredArgument","isRequiredInputField","isScalarType","isUnionType","isSpecifiedScalarType","astFromValue","sortValueNode","BreakingChangeType","DangerousChangeType","findBreakingChanges","oldSchema","newSchema","findSchemaChanges","filter","change","type","findDangerousChanges","concat","_toConsumableArray","findTypeChanges","findDirectiveChanges","schemaChanges","directivesDiff","diff","getDirectives","_iterator","_createForOfIteratorHelper","removed","_step","s","n","done","oldDirective","value","push","DIRECTIVE_REMOVED","description","name","err","e","f","_iterator2","persisted","_step2","_step2$value","_slicedToArray","newDirective","argsDiff","args","_iterator3","added","_step3","newArg","REQUIRED_DIRECTIVE_ARG_ADDED","_iterator4","_step4","oldArg","DIRECTIVE_ARG_REMOVED","isRepeatable","DIRECTIVE_REPEATABLE_REMOVED","_iterator5","locations","_step5","location","includes","DIRECTIVE_LOCATION_REMOVED","typesDiff","Object","values","getTypeMap","_iterator6","_step6","oldType","TYPE_REMOVED","_iterator7","_step7","_step7$value","newType","apply","findEnumTypeChanges","findUnionTypeChanges","findInputObjectTypeChanges","findFieldChanges","findImplementedInterfacesChanges","constructor","TYPE_CHANGED_KIND","typeKindName","fieldsDiff","getFields","_iterator8","_step8","newField","REQUIRED_INPUT_FIELD_ADDED","OPTIONAL_INPUT_FIELD_ADDED","_iterator9","_step9","oldField","FIELD_REMOVED","_iterator10","_step10","_step10$value","isSafe","isChangeSafeForInputObjectFieldOrFieldArg","FIELD_CHANGED_KIND","String","possibleTypesDiff","getTypes","_iterator11","_step11","newPossibleType","TYPE_ADDED_TO_UNION","_iterator12","_step12","oldPossibleType","TYPE_REMOVED_FROM_UNION","valuesDiff","getValues","_iterator13","_step13","newValue","VALUE_ADDED_TO_ENUM","_iterator14","_step14","oldValue","VALUE_REMOVED_FROM_ENUM","interfacesDiff","getInterfaces","_iterator15","_step15","newInterface","IMPLEMENTED_INTERFACE_ADDED","_iterator16","_step16","oldInterface","IMPLEMENTED_INTERFACE_REMOVED","_iterator17","_step17","_iterator18","_step18","_step18$value","findArgChanges","isChangeSafeForObjectOrInterfaceField","_iterator19","_step19","ARG_REMOVED","_iterator20","_step20","_step20$value","ARG_CHANGED_KIND","defaultValue","undefined","ARG_DEFAULT_VALUE_CHANGE","oldValueStr","stringifyValue","newValueStr","_iterator21","_step21","REQUIRED_ARG_ADDED","OPTIONAL_ARG_ADDED","ofType","ast","oldArray","newArray","oldMap","_ref","newMap","_ref2","_iterator22","_step22","oldItem","newItem","_iterator23","_step23"],"sources":["/Users/kenjifleming/course-challenges/Perfect-Parlay/perfect-parlay/client/node_modules/graphql/utilities/findBreakingChanges.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { print } from '../language/printer.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport { isSpecifiedScalarType } from '../type/scalars.mjs';\nimport { astFromValue } from './astFromValue.mjs';\nimport { sortValueNode } from './sortValueNode.mjs';\nvar BreakingChangeType;\n\n(function (BreakingChangeType) {\n  BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';\n  BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';\n  BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';\n  BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';\n  BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] =\n    'REQUIRED_INPUT_FIELD_ADDED';\n  BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] =\n    'IMPLEMENTED_INTERFACE_REMOVED';\n  BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';\n  BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';\n  BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';\n  BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';\n  BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';\n  BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';\n  BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';\n  BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] =\n    'REQUIRED_DIRECTIVE_ARG_ADDED';\n  BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] =\n    'DIRECTIVE_REPEATABLE_REMOVED';\n  BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] =\n    'DIRECTIVE_LOCATION_REMOVED';\n})(BreakingChangeType || (BreakingChangeType = {}));\n\nexport { BreakingChangeType };\nvar DangerousChangeType;\n\n(function (DangerousChangeType) {\n  DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';\n  DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';\n  DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] =\n    'OPTIONAL_INPUT_FIELD_ADDED';\n  DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';\n  DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] =\n    'IMPLEMENTED_INTERFACE_ADDED';\n  DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';\n})(DangerousChangeType || (DangerousChangeType = {}));\n\nexport { DangerousChangeType };\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nexport function findBreakingChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in BreakingChangeType,\n  );\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in DangerousChangeType,\n  );\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [\n    ...findTypeChanges(oldSchema, newSchema),\n    ...findDirectiveChanges(oldSchema, newSchema),\n  ];\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const directivesDiff = diff(\n    oldSchema.getDirectives(),\n    newSchema.getDirectives(),\n  );\n\n  for (const oldDirective of directivesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: `${oldDirective.name} was removed.`,\n    });\n  }\n\n  for (const [oldDirective, newDirective] of directivesDiff.persisted) {\n    const argsDiff = diff(oldDirective.args, newDirective.args);\n\n    for (const newArg of argsDiff.added) {\n      if (isRequiredArgument(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: `A required arg ${newArg.name} on directive ${oldDirective.name} was added.`,\n        });\n      }\n    }\n\n    for (const oldArg of argsDiff.removed) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: `${oldArg.name} was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    if (oldDirective.isRepeatable && !newDirective.isRepeatable) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,\n        description: `Repeatable flag was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    for (const location of oldDirective.locations) {\n      if (!newDirective.locations.includes(location)) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: `${location} was removed from ${oldDirective.name}.`,\n        });\n      }\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const typesDiff = diff(\n    Object.values(oldSchema.getTypeMap()),\n    Object.values(newSchema.getTypeMap()),\n  );\n\n  for (const oldType of typesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: isSpecifiedScalarType(oldType)\n        ? `Standard scalar ${oldType.name} was removed because it is not referenced anymore.`\n        : `${oldType.name} was removed.`,\n    });\n  }\n\n  for (const [oldType, newType] of typesDiff.persisted) {\n    if (isEnumType(oldType) && isEnumType(newType)) {\n      schemaChanges.push(...findEnumTypeChanges(oldType, newType));\n    } else if (isUnionType(oldType) && isUnionType(newType)) {\n      schemaChanges.push(...findUnionTypeChanges(oldType, newType));\n    } else if (isInputObjectType(oldType) && isInputObjectType(newType)) {\n      schemaChanges.push(...findInputObjectTypeChanges(oldType, newType));\n    } else if (isObjectType(oldType) && isObjectType(newType)) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (isInterfaceType(oldType) && isInterfaceType(newType)) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description:\n          `${oldType.name} changed from ` +\n          `${typeKindName(oldType)} to ${typeKindName(newType)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const newField of fieldsDiff.added) {\n    if (isRequiredInputField(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: `A required field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: `An optional field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    }\n  }\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  for (const newPossibleType of possibleTypesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: `${newPossibleType.name} was added to union type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldPossibleType of possibleTypesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: `${oldPossibleType.name} was removed from union type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  for (const newValue of valuesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: `${newValue.name} was added to enum type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldValue of valuesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: `${oldValue.name} was removed from enum type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findImplementedInterfacesChanges(oldType, newType) {\n  const schemaChanges = [];\n  const interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  for (const newInterface of interfacesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,\n      description: `${newInterface.name} added to interfaces implemented by ${oldType.name}.`,\n    });\n  }\n\n  for (const oldInterface of interfacesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,\n      description: `${oldType.name} no longer implements interface ${oldInterface.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    schemaChanges.push(...findArgChanges(oldType, oldField, newField));\n    const isSafe = isChangeSafeForObjectOrInterfaceField(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  const schemaChanges = [];\n  const argsDiff = diff(oldField.args, newField.args);\n\n  for (const oldArg of argsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: `${oldType.name}.${oldField.name} arg ${oldArg.name} was removed.`,\n    });\n  }\n\n  for (const [oldArg, newArg] of argsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldArg.type,\n      newArg.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed type from ` +\n          `${String(oldArg.type)} to ${String(newArg.type)}.`,\n      });\n    } else if (oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: `${oldType.name}.${oldField.name} arg ${oldArg.name} defaultValue was removed.`,\n        });\n      } else {\n        // Since we looking only for client's observable changes we should\n        // compare default values in the same representation as they are\n        // represented inside introspection.\n        const oldValueStr = stringifyValue(oldArg.defaultValue, oldArg.type);\n        const newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`,\n          });\n        }\n      }\n    }\n  }\n\n  for (const newArg of argsDiff.added) {\n    if (isRequiredArgument(newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: `A required arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: `An optional arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      (isListType(newType) &&\n        isChangeSafeForObjectOrInterfaceField(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from nullable to non-null of the same underlying type is safe\n      (isNonNullType(newType) &&\n        isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return (\n      isNonNullType(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType)\n    );\n  }\n\n  return (\n    // if they're both named types, see if their names are equivalent\n    (isNamedType(newType) && oldType.name === newType.name) || // moving from nullable to non-null of the same underlying type is safe\n    (isNonNullType(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return (\n      isListType(newType) &&\n      isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType)\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      (isNonNullType(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from non-null to nullable of the same underlying type is safe\n      (!isNonNullType(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType))\n    );\n  } // if they're both named types, see if their names are equivalent\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction stringifyValue(value, type) {\n  const ast = astFromValue(value, type);\n  ast != null || invariant(false);\n  return print(sortValueNode(ast));\n}\n\nfunction diff(oldArray, newArray) {\n  const added = [];\n  const removed = [];\n  const persisted = [];\n  const oldMap = keyMap(oldArray, ({ name }) => name);\n  const newMap = keyMap(newArray, ({ name }) => name);\n\n  for (const oldItem of oldArray) {\n    const newItem = newMap[oldItem.name];\n\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n\n  for (const newItem of newArray) {\n    if (oldMap[newItem.name] === undefined) {\n      added.push(newItem);\n    }\n  }\n\n  return {\n    added,\n    persisted,\n    removed,\n  };\n}\n"],"mappings":";;;AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,KAAK,QAAQ,yBAAyB;AAC/C,SACEC,UAAU,EACVC,iBAAiB,EACjBC,eAAe,EACfC,UAAU,EACVC,WAAW,EACXC,aAAa,EACbC,YAAY,EACZC,kBAAkB,EAClBC,oBAAoB,EACpBC,YAAY,EACZC,WAAW,QACN,wBAAwB;AAC/B,SAASC,qBAAqB,QAAQ,qBAAqB;AAC3D,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,aAAa,QAAQ,qBAAqB;AACnD,IAAIC,kBAAkB;AAEtB,CAAC,UAAUA,kBAAkB,EAAE;EAC7BA,kBAAkB,CAAC,cAAc,CAAC,GAAG,cAAc;EACnDA,kBAAkB,CAAC,mBAAmB,CAAC,GAAG,mBAAmB;EAC7DA,kBAAkB,CAAC,yBAAyB,CAAC,GAAG,yBAAyB;EACzEA,kBAAkB,CAAC,yBAAyB,CAAC,GAAG,yBAAyB;EACzEA,kBAAkB,CAAC,4BAA4B,CAAC,GAC9C,4BAA4B;EAC9BA,kBAAkB,CAAC,+BAA+B,CAAC,GACjD,+BAA+B;EACjCA,kBAAkB,CAAC,eAAe,CAAC,GAAG,eAAe;EACrDA,kBAAkB,CAAC,oBAAoB,CAAC,GAAG,oBAAoB;EAC/DA,kBAAkB,CAAC,oBAAoB,CAAC,GAAG,oBAAoB;EAC/DA,kBAAkB,CAAC,aAAa,CAAC,GAAG,aAAa;EACjDA,kBAAkB,CAAC,kBAAkB,CAAC,GAAG,kBAAkB;EAC3DA,kBAAkB,CAAC,mBAAmB,CAAC,GAAG,mBAAmB;EAC7DA,kBAAkB,CAAC,uBAAuB,CAAC,GAAG,uBAAuB;EACrEA,kBAAkB,CAAC,8BAA8B,CAAC,GAChD,8BAA8B;EAChCA,kBAAkB,CAAC,8BAA8B,CAAC,GAChD,8BAA8B;EAChCA,kBAAkB,CAAC,4BAA4B,CAAC,GAC9C,4BAA4B;AAChC,CAAC,EAAEA,kBAAkB,KAAKA,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC;AAEnD,SAASA,kBAAkB;AAC3B,IAAIC,mBAAmB;AAEvB,CAAC,UAAUA,mBAAmB,EAAE;EAC9BA,mBAAmB,CAAC,qBAAqB,CAAC,GAAG,qBAAqB;EAClEA,mBAAmB,CAAC,qBAAqB,CAAC,GAAG,qBAAqB;EAClEA,mBAAmB,CAAC,4BAA4B,CAAC,GAC/C,4BAA4B;EAC9BA,mBAAmB,CAAC,oBAAoB,CAAC,GAAG,oBAAoB;EAChEA,mBAAmB,CAAC,6BAA6B,CAAC,GAChD,6BAA6B;EAC/BA,mBAAmB,CAAC,0BAA0B,CAAC,GAAG,0BAA0B;AAC9E,CAAC,EAAEA,mBAAmB,KAAKA,mBAAmB,GAAG,CAAC,CAAC,CAAC,CAAC;AAErD,SAASA,mBAAmB;;AAE5B;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAACC,SAAS,EAAEC,SAAS,EAAE;EACxD;EACA,OAAOC,iBAAiB,CAACF,SAAS,EAAEC,SAAS,CAAC,CAACE,MAAM,CACnD,UAACC,MAAM;IAAA,OAAKA,MAAM,CAACC,IAAI,IAAIR,kBAAkB;EAAA,EAC9C;AACH;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASS,oBAAoBA,CAACN,SAAS,EAAEC,SAAS,EAAE;EACzD;EACA,OAAOC,iBAAiB,CAACF,SAAS,EAAEC,SAAS,CAAC,CAACE,MAAM,CACnD,UAACC,MAAM;IAAA,OAAKA,MAAM,CAACC,IAAI,IAAIP,mBAAmB;EAAA,EAC/C;AACH;AAEA,SAASI,iBAAiBA,CAACF,SAAS,EAAEC,SAAS,EAAE;EAC/C,UAAAM,MAAA,CAAAC,kBAAA,CACKC,eAAe,CAACT,SAAS,EAAEC,SAAS,CAAC,GAAAO,kBAAA,CACrCE,oBAAoB,CAACV,SAAS,EAAEC,SAAS,CAAC;AAEjD;AAEA,SAASS,oBAAoBA,CAACV,SAAS,EAAEC,SAAS,EAAE;EAClD,IAAMU,aAAa,GAAG,EAAE;EACxB,IAAMC,cAAc,GAAGC,IAAI,CACzBb,SAAS,CAACc,aAAa,EAAE,EACzBb,SAAS,CAACa,aAAa,EAAE,CAC1B;EAAC,IAAAC,SAAA,GAAAC,0BAAA,CAEyBJ,cAAc,CAACK,OAAO;IAAAC,KAAA;EAAA;IAAjD,KAAAH,SAAA,CAAAI,CAAA,MAAAD,KAAA,GAAAH,SAAA,CAAAK,CAAA,IAAAC,IAAA,GAAmD;MAAA,IAAxCC,YAAY,GAAAJ,KAAA,CAAAK,KAAA;MACrBZ,aAAa,CAACa,IAAI,CAAC;QACjBnB,IAAI,EAAER,kBAAkB,CAAC4B,iBAAiB;QAC1CC,WAAW,KAAAnB,MAAA,CAAKe,YAAY,CAACK,IAAI;MACnC,CAAC,CAAC;IACJ;EAAC,SAAAC,GAAA;IAAAb,SAAA,CAAAc,CAAA,CAAAD,GAAA;EAAA;IAAAb,SAAA,CAAAe,CAAA;EAAA;EAAA,IAAAC,UAAA,GAAAf,0BAAA,CAE0CJ,cAAc,CAACoB,SAAS;IAAAC,MAAA;EAAA;IAAnE,KAAAF,UAAA,CAAAZ,CAAA,MAAAc,MAAA,GAAAF,UAAA,CAAAX,CAAA,IAAAC,IAAA,GAAqE;MAAA,IAAAa,YAAA,GAAAC,cAAA,CAAAF,MAAA,CAAAV,KAAA;QAAzDD,aAAY,GAAAY,YAAA;QAAEE,YAAY,GAAAF,YAAA;MACpC,IAAMG,QAAQ,GAAGxB,IAAI,CAACS,aAAY,CAACgB,IAAI,EAAEF,YAAY,CAACE,IAAI,CAAC;MAAC,IAAAC,UAAA,GAAAvB,0BAAA,CAEvCqB,QAAQ,CAACG,KAAK;QAAAC,MAAA;MAAA;QAAnC,KAAAF,UAAA,CAAApB,CAAA,MAAAsB,MAAA,GAAAF,UAAA,CAAAnB,CAAA,IAAAC,IAAA,GAAqC;UAAA,IAA1BqB,MAAM,GAAAD,MAAA,CAAAlB,KAAA;UACf,IAAIjC,kBAAkB,CAACoD,MAAM,CAAC,EAAE;YAC9B/B,aAAa,CAACa,IAAI,CAAC;cACjBnB,IAAI,EAAER,kBAAkB,CAAC8C,4BAA4B;cACrDjB,WAAW,oBAAAnB,MAAA,CAAoBmC,MAAM,CAACf,IAAI,oBAAApB,MAAA,CAAiBe,aAAY,CAACK,IAAI;YAC9E,CAAC,CAAC;UACJ;QACF;MAAC,SAAAC,GAAA;QAAAW,UAAA,CAAAV,CAAA,CAAAD,GAAA;MAAA;QAAAW,UAAA,CAAAT,CAAA;MAAA;MAAA,IAAAc,UAAA,GAAA5B,0BAAA,CAEoBqB,QAAQ,CAACpB,OAAO;QAAA4B,MAAA;MAAA;QAArC,KAAAD,UAAA,CAAAzB,CAAA,MAAA0B,MAAA,GAAAD,UAAA,CAAAxB,CAAA,IAAAC,IAAA,GAAuC;UAAA,IAA5ByB,MAAM,GAAAD,MAAA,CAAAtB,KAAA;UACfZ,aAAa,CAACa,IAAI,CAAC;YACjBnB,IAAI,EAAER,kBAAkB,CAACkD,qBAAqB;YAC9CrB,WAAW,KAAAnB,MAAA,CAAKuC,MAAM,CAACnB,IAAI,wBAAApB,MAAA,CAAqBe,aAAY,CAACK,IAAI;UACnE,CAAC,CAAC;QACJ;MAAC,SAAAC,GAAA;QAAAgB,UAAA,CAAAf,CAAA,CAAAD,GAAA;MAAA;QAAAgB,UAAA,CAAAd,CAAA;MAAA;MAED,IAAIR,aAAY,CAAC0B,YAAY,IAAI,CAACZ,YAAY,CAACY,YAAY,EAAE;QAC3DrC,aAAa,CAACa,IAAI,CAAC;UACjBnB,IAAI,EAAER,kBAAkB,CAACoD,4BAA4B;UACrDvB,WAAW,sCAAAnB,MAAA,CAAsCe,aAAY,CAACK,IAAI;QACpE,CAAC,CAAC;MACJ;MAAC,IAAAuB,UAAA,GAAAlC,0BAAA,CAEsBM,aAAY,CAAC6B,SAAS;QAAAC,MAAA;MAAA;QAA7C,KAAAF,UAAA,CAAA/B,CAAA,MAAAiC,MAAA,GAAAF,UAAA,CAAA9B,CAAA,IAAAC,IAAA,GAA+C;UAAA,IAApCgC,QAAQ,GAAAD,MAAA,CAAA7B,KAAA;UACjB,IAAI,CAACa,YAAY,CAACe,SAAS,CAACG,QAAQ,CAACD,QAAQ,CAAC,EAAE;YAC9C1C,aAAa,CAACa,IAAI,CAAC;cACjBnB,IAAI,EAAER,kBAAkB,CAAC0D,0BAA0B;cACnD7B,WAAW,KAAAnB,MAAA,CAAK8C,QAAQ,wBAAA9C,MAAA,CAAqBe,aAAY,CAACK,IAAI;YAChE,CAAC,CAAC;UACJ;QACF;MAAC,SAAAC,GAAA;QAAAsB,UAAA,CAAArB,CAAA,CAAAD,GAAA;MAAA;QAAAsB,UAAA,CAAApB,CAAA;MAAA;IACH;EAAC,SAAAF,GAAA;IAAAG,UAAA,CAAAF,CAAA,CAAAD,GAAA;EAAA;IAAAG,UAAA,CAAAD,CAAA;EAAA;EAED,OAAOnB,aAAa;AACtB;AAEA,SAASF,eAAeA,CAACT,SAAS,EAAEC,SAAS,EAAE;EAC7C,IAAMU,aAAa,GAAG,EAAE;EACxB,IAAM6C,SAAS,GAAG3C,IAAI,CACpB4C,MAAM,CAACC,MAAM,CAAC1D,SAAS,CAAC2D,UAAU,EAAE,CAAC,EACrCF,MAAM,CAACC,MAAM,CAACzD,SAAS,CAAC0D,UAAU,EAAE,CAAC,CACtC;EAAC,IAAAC,UAAA,GAAA5C,0BAAA,CAEoBwC,SAAS,CAACvC,OAAO;IAAA4C,MAAA;EAAA;IAAvC,KAAAD,UAAA,CAAAzC,CAAA,MAAA0C,MAAA,GAAAD,UAAA,CAAAxC,CAAA,IAAAC,IAAA,GAAyC;MAAA,IAA9ByC,OAAO,GAAAD,MAAA,CAAAtC,KAAA;MAChBZ,aAAa,CAACa,IAAI,CAAC;QACjBnB,IAAI,EAAER,kBAAkB,CAACkE,YAAY;QACrCrC,WAAW,EAAEhC,qBAAqB,CAACoE,OAAO,CAAC,sBAAAvD,MAAA,CACpBuD,OAAO,CAACnC,IAAI,6DAAApB,MAAA,CAC5BuD,OAAO,CAACnC,IAAI;MACrB,CAAC,CAAC;IACJ;EAAC,SAAAC,GAAA;IAAAgC,UAAA,CAAA/B,CAAA,CAAAD,GAAA;EAAA;IAAAgC,UAAA,CAAA9B,CAAA;EAAA;EAAA,IAAAkC,UAAA,GAAAhD,0BAAA,CAEgCwC,SAAS,CAACxB,SAAS;IAAAiC,MAAA;EAAA;IAApD,KAAAD,UAAA,CAAA7C,CAAA,MAAA8C,MAAA,GAAAD,UAAA,CAAA5C,CAAA,IAAAC,IAAA,GAAsD;MAAA,IAAA6C,YAAA,GAAA/B,cAAA,CAAA8B,MAAA,CAAA1C,KAAA;QAA1CuC,QAAO,GAAAI,YAAA;QAAEC,OAAO,GAAAD,YAAA;MAC1B,IAAInF,UAAU,CAAC+E,QAAO,CAAC,IAAI/E,UAAU,CAACoF,OAAO,CAAC,EAAE;QAC9CxD,aAAa,CAACa,IAAI,CAAA4C,KAAA,CAAlBzD,aAAa,EAAAH,kBAAA,CAAS6D,mBAAmB,CAACP,QAAO,EAAEK,OAAO,CAAC,EAAC;MAC9D,CAAC,MAAM,IAAI1E,WAAW,CAACqE,QAAO,CAAC,IAAIrE,WAAW,CAAC0E,OAAO,CAAC,EAAE;QACvDxD,aAAa,CAACa,IAAI,CAAA4C,KAAA,CAAlBzD,aAAa,EAAAH,kBAAA,CAAS8D,oBAAoB,CAACR,QAAO,EAAEK,OAAO,CAAC,EAAC;MAC/D,CAAC,MAAM,IAAInF,iBAAiB,CAAC8E,QAAO,CAAC,IAAI9E,iBAAiB,CAACmF,OAAO,CAAC,EAAE;QACnExD,aAAa,CAACa,IAAI,CAAA4C,KAAA,CAAlBzD,aAAa,EAAAH,kBAAA,CAAS+D,0BAA0B,CAACT,QAAO,EAAEK,OAAO,CAAC,EAAC;MACrE,CAAC,MAAM,IAAI9E,YAAY,CAACyE,QAAO,CAAC,IAAIzE,YAAY,CAAC8E,OAAO,CAAC,EAAE;QACzDxD,aAAa,CAACa,IAAI,CAAA4C,KAAA,CAAlBzD,aAAa,EAAAH,kBAAA,CACRgE,gBAAgB,CAACV,QAAO,EAAEK,OAAO,CAAC,EAAA5D,MAAA,CAAAC,kBAAA,CAClCiE,gCAAgC,CAACX,QAAO,EAAEK,OAAO,CAAC,GACtD;MACH,CAAC,MAAM,IAAIlF,eAAe,CAAC6E,QAAO,CAAC,IAAI7E,eAAe,CAACkF,OAAO,CAAC,EAAE;QAC/DxD,aAAa,CAACa,IAAI,CAAA4C,KAAA,CAAlBzD,aAAa,EAAAH,kBAAA,CACRgE,gBAAgB,CAACV,QAAO,EAAEK,OAAO,CAAC,EAAA5D,MAAA,CAAAC,kBAAA,CAClCiE,gCAAgC,CAACX,QAAO,EAAEK,OAAO,CAAC,GACtD;MACH,CAAC,MAAM,IAAIL,QAAO,CAACY,WAAW,KAAKP,OAAO,CAACO,WAAW,EAAE;QACtD/D,aAAa,CAACa,IAAI,CAAC;UACjBnB,IAAI,EAAER,kBAAkB,CAAC8E,iBAAiB;UAC1CjD,WAAW,EACT,GAAAnB,MAAA,CAAGuD,QAAO,CAACnC,IAAI,yBAAApB,MAAA,CACZqE,YAAY,CAACd,QAAO,CAAC,UAAAvD,MAAA,CAAOqE,YAAY,CAACT,OAAO,CAAC;QACxD,CAAC,CAAC;MACJ;IACF;EAAC,SAAAvC,GAAA;IAAAoC,UAAA,CAAAnC,CAAA,CAAAD,GAAA;EAAA;IAAAoC,UAAA,CAAAlC,CAAA;EAAA;EAED,OAAOnB,aAAa;AACtB;AAEA,SAAS4D,0BAA0BA,CAACT,OAAO,EAAEK,OAAO,EAAE;EACpD,IAAMxD,aAAa,GAAG,EAAE;EACxB,IAAMkE,UAAU,GAAGhE,IAAI,CACrB4C,MAAM,CAACC,MAAM,CAACI,OAAO,CAACgB,SAAS,EAAE,CAAC,EAClCrB,MAAM,CAACC,MAAM,CAACS,OAAO,CAACW,SAAS,EAAE,CAAC,CACnC;EAAC,IAAAC,UAAA,GAAA/D,0BAAA,CAEqB6D,UAAU,CAACrC,KAAK;IAAAwC,MAAA;EAAA;IAAvC,KAAAD,UAAA,CAAA5D,CAAA,MAAA6D,MAAA,GAAAD,UAAA,CAAA3D,CAAA,IAAAC,IAAA,GAAyC;MAAA,IAA9B4D,QAAQ,GAAAD,MAAA,CAAAzD,KAAA;MACjB,IAAIhC,oBAAoB,CAAC0F,QAAQ,CAAC,EAAE;QAClCtE,aAAa,CAACa,IAAI,CAAC;UACjBnB,IAAI,EAAER,kBAAkB,CAACqF,0BAA0B;UACnDxD,WAAW,sBAAAnB,MAAA,CAAsB0E,QAAQ,CAACtD,IAAI,qBAAApB,MAAA,CAAkBuD,OAAO,CAACnC,IAAI;QAC9E,CAAC,CAAC;MACJ,CAAC,MAAM;QACLhB,aAAa,CAACa,IAAI,CAAC;UACjBnB,IAAI,EAAEP,mBAAmB,CAACqF,0BAA0B;UACpDzD,WAAW,uBAAAnB,MAAA,CAAuB0E,QAAQ,CAACtD,IAAI,qBAAApB,MAAA,CAAkBuD,OAAO,CAACnC,IAAI;QAC/E,CAAC,CAAC;MACJ;IACF;EAAC,SAAAC,GAAA;IAAAmD,UAAA,CAAAlD,CAAA,CAAAD,GAAA;EAAA;IAAAmD,UAAA,CAAAjD,CAAA;EAAA;EAAA,IAAAsD,UAAA,GAAApE,0BAAA,CAEsB6D,UAAU,CAAC5D,OAAO;IAAAoE,MAAA;EAAA;IAAzC,KAAAD,UAAA,CAAAjE,CAAA,MAAAkE,MAAA,GAAAD,UAAA,CAAAhE,CAAA,IAAAC,IAAA,GAA2C;MAAA,IAAhCiE,QAAQ,GAAAD,MAAA,CAAA9D,KAAA;MACjBZ,aAAa,CAACa,IAAI,CAAC;QACjBnB,IAAI,EAAER,kBAAkB,CAAC0F,aAAa;QACtC7D,WAAW,KAAAnB,MAAA,CAAKuD,OAAO,CAACnC,IAAI,OAAApB,MAAA,CAAI+E,QAAQ,CAAC3D,IAAI;MAC/C,CAAC,CAAC;IACJ;EAAC,SAAAC,GAAA;IAAAwD,UAAA,CAAAvD,CAAA,CAAAD,GAAA;EAAA;IAAAwD,UAAA,CAAAtD,CAAA;EAAA;EAAA,IAAA0D,WAAA,GAAAxE,0BAAA,CAEkC6D,UAAU,CAAC7C,SAAS;IAAAyD,OAAA;EAAA;IAAvD,KAAAD,WAAA,CAAArE,CAAA,MAAAsE,OAAA,GAAAD,WAAA,CAAApE,CAAA,IAAAC,IAAA,GAAyD;MAAA,IAAAqE,aAAA,GAAAvD,cAAA,CAAAsD,OAAA,CAAAlE,KAAA;QAA7C+D,SAAQ,GAAAI,aAAA;QAAET,SAAQ,GAAAS,aAAA;MAC5B,IAAMC,MAAM,GAAGC,yCAAyC,CACtDN,SAAQ,CAACjF,IAAI,EACb4E,SAAQ,CAAC5E,IAAI,CACd;MAED,IAAI,CAACsF,MAAM,EAAE;QACXhF,aAAa,CAACa,IAAI,CAAC;UACjBnB,IAAI,EAAER,kBAAkB,CAACgG,kBAAkB;UAC3CnE,WAAW,EACT,GAAAnB,MAAA,CAAGuD,OAAO,CAACnC,IAAI,OAAApB,MAAA,CAAI+E,SAAQ,CAAC3D,IAAI,8BAAApB,MAAA,CAC7BuF,MAAM,CAACR,SAAQ,CAACjF,IAAI,CAAC,UAAAE,MAAA,CAAOuF,MAAM,CAACb,SAAQ,CAAC5E,IAAI,CAAC;QACxD,CAAC,CAAC;MACJ;IACF;EAAC,SAAAuB,GAAA;IAAA4D,WAAA,CAAA3D,CAAA,CAAAD,GAAA;EAAA;IAAA4D,WAAA,CAAA1D,CAAA;EAAA;EAED,OAAOnB,aAAa;AACtB;AAEA,SAAS2D,oBAAoBA,CAACR,OAAO,EAAEK,OAAO,EAAE;EAC9C,IAAMxD,aAAa,GAAG,EAAE;EACxB,IAAMoF,iBAAiB,GAAGlF,IAAI,CAACiD,OAAO,CAACkC,QAAQ,EAAE,EAAE7B,OAAO,CAAC6B,QAAQ,EAAE,CAAC;EAAC,IAAAC,WAAA,GAAAjF,0BAAA,CAEzC+E,iBAAiB,CAACvD,KAAK;IAAA0D,OAAA;EAAA;IAArD,KAAAD,WAAA,CAAA9E,CAAA,MAAA+E,OAAA,GAAAD,WAAA,CAAA7E,CAAA,IAAAC,IAAA,GAAuD;MAAA,IAA5C8E,eAAe,GAAAD,OAAA,CAAA3E,KAAA;MACxBZ,aAAa,CAACa,IAAI,CAAC;QACjBnB,IAAI,EAAEP,mBAAmB,CAACsG,mBAAmB;QAC7C1E,WAAW,KAAAnB,MAAA,CAAK4F,eAAe,CAACxE,IAAI,+BAAApB,MAAA,CAA4BuD,OAAO,CAACnC,IAAI;MAC9E,CAAC,CAAC;IACJ;EAAC,SAAAC,GAAA;IAAAqE,WAAA,CAAApE,CAAA,CAAAD,GAAA;EAAA;IAAAqE,WAAA,CAAAnE,CAAA;EAAA;EAAA,IAAAuE,WAAA,GAAArF,0BAAA,CAE6B+E,iBAAiB,CAAC9E,OAAO;IAAAqF,OAAA;EAAA;IAAvD,KAAAD,WAAA,CAAAlF,CAAA,MAAAmF,OAAA,GAAAD,WAAA,CAAAjF,CAAA,IAAAC,IAAA,GAAyD;MAAA,IAA9CkF,eAAe,GAAAD,OAAA,CAAA/E,KAAA;MACxBZ,aAAa,CAACa,IAAI,CAAC;QACjBnB,IAAI,EAAER,kBAAkB,CAAC2G,uBAAuB;QAChD9E,WAAW,KAAAnB,MAAA,CAAKgG,eAAe,CAAC5E,IAAI,mCAAApB,MAAA,CAAgCuD,OAAO,CAACnC,IAAI;MAClF,CAAC,CAAC;IACJ;EAAC,SAAAC,GAAA;IAAAyE,WAAA,CAAAxE,CAAA,CAAAD,GAAA;EAAA;IAAAyE,WAAA,CAAAvE,CAAA;EAAA;EAED,OAAOnB,aAAa;AACtB;AAEA,SAAS0D,mBAAmBA,CAACP,OAAO,EAAEK,OAAO,EAAE;EAC7C,IAAMxD,aAAa,GAAG,EAAE;EACxB,IAAM8F,UAAU,GAAG5F,IAAI,CAACiD,OAAO,CAAC4C,SAAS,EAAE,EAAEvC,OAAO,CAACuC,SAAS,EAAE,CAAC;EAAC,IAAAC,WAAA,GAAA3F,0BAAA,CAE3CyF,UAAU,CAACjE,KAAK;IAAAoE,OAAA;EAAA;IAAvC,KAAAD,WAAA,CAAAxF,CAAA,MAAAyF,OAAA,GAAAD,WAAA,CAAAvF,CAAA,IAAAC,IAAA,GAAyC;MAAA,IAA9BwF,QAAQ,GAAAD,OAAA,CAAArF,KAAA;MACjBZ,aAAa,CAACa,IAAI,CAAC;QACjBnB,IAAI,EAAEP,mBAAmB,CAACgH,mBAAmB;QAC7CpF,WAAW,KAAAnB,MAAA,CAAKsG,QAAQ,CAAClF,IAAI,8BAAApB,MAAA,CAA2BuD,OAAO,CAACnC,IAAI;MACtE,CAAC,CAAC;IACJ;EAAC,SAAAC,GAAA;IAAA+E,WAAA,CAAA9E,CAAA,CAAAD,GAAA;EAAA;IAAA+E,WAAA,CAAA7E,CAAA;EAAA;EAAA,IAAAiF,WAAA,GAAA/F,0BAAA,CAEsByF,UAAU,CAACxF,OAAO;IAAA+F,OAAA;EAAA;IAAzC,KAAAD,WAAA,CAAA5F,CAAA,MAAA6F,OAAA,GAAAD,WAAA,CAAA3F,CAAA,IAAAC,IAAA,GAA2C;MAAA,IAAhC4F,QAAQ,GAAAD,OAAA,CAAAzF,KAAA;MACjBZ,aAAa,CAACa,IAAI,CAAC;QACjBnB,IAAI,EAAER,kBAAkB,CAACqH,uBAAuB;QAChDxF,WAAW,KAAAnB,MAAA,CAAK0G,QAAQ,CAACtF,IAAI,kCAAApB,MAAA,CAA+BuD,OAAO,CAACnC,IAAI;MAC1E,CAAC,CAAC;IACJ;EAAC,SAAAC,GAAA;IAAAmF,WAAA,CAAAlF,CAAA,CAAAD,GAAA;EAAA;IAAAmF,WAAA,CAAAjF,CAAA;EAAA;EAED,OAAOnB,aAAa;AACtB;AAEA,SAAS8D,gCAAgCA,CAACX,OAAO,EAAEK,OAAO,EAAE;EAC1D,IAAMxD,aAAa,GAAG,EAAE;EACxB,IAAMwG,cAAc,GAAGtG,IAAI,CAACiD,OAAO,CAACsD,aAAa,EAAE,EAAEjD,OAAO,CAACiD,aAAa,EAAE,CAAC;EAAC,IAAAC,WAAA,GAAArG,0BAAA,CAEnDmG,cAAc,CAAC3E,KAAK;IAAA8E,OAAA;EAAA;IAA/C,KAAAD,WAAA,CAAAlG,CAAA,MAAAmG,OAAA,GAAAD,WAAA,CAAAjG,CAAA,IAAAC,IAAA,GAAiD;MAAA,IAAtCkG,YAAY,GAAAD,OAAA,CAAA/F,KAAA;MACrBZ,aAAa,CAACa,IAAI,CAAC;QACjBnB,IAAI,EAAEP,mBAAmB,CAAC0H,2BAA2B;QACrD9F,WAAW,KAAAnB,MAAA,CAAKgH,YAAY,CAAC5F,IAAI,0CAAApB,MAAA,CAAuCuD,OAAO,CAACnC,IAAI;MACtF,CAAC,CAAC;IACJ;EAAC,SAAAC,GAAA;IAAAyF,WAAA,CAAAxF,CAAA,CAAAD,GAAA;EAAA;IAAAyF,WAAA,CAAAvF,CAAA;EAAA;EAAA,IAAA2F,WAAA,GAAAzG,0BAAA,CAE0BmG,cAAc,CAAClG,OAAO;IAAAyG,OAAA;EAAA;IAAjD,KAAAD,WAAA,CAAAtG,CAAA,MAAAuG,OAAA,GAAAD,WAAA,CAAArG,CAAA,IAAAC,IAAA,GAAmD;MAAA,IAAxCsG,YAAY,GAAAD,OAAA,CAAAnG,KAAA;MACrBZ,aAAa,CAACa,IAAI,CAAC;QACjBnB,IAAI,EAAER,kBAAkB,CAAC+H,6BAA6B;QACtDlG,WAAW,KAAAnB,MAAA,CAAKuD,OAAO,CAACnC,IAAI,sCAAApB,MAAA,CAAmCoH,YAAY,CAAChG,IAAI;MAClF,CAAC,CAAC;IACJ;EAAC,SAAAC,GAAA;IAAA6F,WAAA,CAAA5F,CAAA,CAAAD,GAAA;EAAA;IAAA6F,WAAA,CAAA3F,CAAA;EAAA;EAED,OAAOnB,aAAa;AACtB;AAEA,SAAS6D,gBAAgBA,CAACV,OAAO,EAAEK,OAAO,EAAE;EAC1C,IAAMxD,aAAa,GAAG,EAAE;EACxB,IAAMkE,UAAU,GAAGhE,IAAI,CACrB4C,MAAM,CAACC,MAAM,CAACI,OAAO,CAACgB,SAAS,EAAE,CAAC,EAClCrB,MAAM,CAACC,MAAM,CAACS,OAAO,CAACW,SAAS,EAAE,CAAC,CACnC;EAAC,IAAA+C,WAAA,GAAA7G,0BAAA,CAEqB6D,UAAU,CAAC5D,OAAO;IAAA6G,OAAA;EAAA;IAAzC,KAAAD,WAAA,CAAA1G,CAAA,MAAA2G,OAAA,GAAAD,WAAA,CAAAzG,CAAA,IAAAC,IAAA,GAA2C;MAAA,IAAhCiE,QAAQ,GAAAwC,OAAA,CAAAvG,KAAA;MACjBZ,aAAa,CAACa,IAAI,CAAC;QACjBnB,IAAI,EAAER,kBAAkB,CAAC0F,aAAa;QACtC7D,WAAW,KAAAnB,MAAA,CAAKuD,OAAO,CAACnC,IAAI,OAAApB,MAAA,CAAI+E,QAAQ,CAAC3D,IAAI;MAC/C,CAAC,CAAC;IACJ;EAAC,SAAAC,GAAA;IAAAiG,WAAA,CAAAhG,CAAA,CAAAD,GAAA;EAAA;IAAAiG,WAAA,CAAA/F,CAAA;EAAA;EAAA,IAAAiG,WAAA,GAAA/G,0BAAA,CAEkC6D,UAAU,CAAC7C,SAAS;IAAAgG,OAAA;EAAA;IAAvD,KAAAD,WAAA,CAAA5G,CAAA,MAAA6G,OAAA,GAAAD,WAAA,CAAA3G,CAAA,IAAAC,IAAA,GAAyD;MAAA,IAAA4G,aAAA,GAAA9F,cAAA,CAAA6F,OAAA,CAAAzG,KAAA;QAA7C+D,UAAQ,GAAA2C,aAAA;QAAEhD,QAAQ,GAAAgD,aAAA;MAC5BtH,aAAa,CAACa,IAAI,CAAA4C,KAAA,CAAlBzD,aAAa,EAAAH,kBAAA,CAAS0H,cAAc,CAACpE,OAAO,EAAEwB,UAAQ,EAAEL,QAAQ,CAAC,EAAC;MAClE,IAAMU,MAAM,GAAGwC,qCAAqC,CAClD7C,UAAQ,CAACjF,IAAI,EACb4E,QAAQ,CAAC5E,IAAI,CACd;MAED,IAAI,CAACsF,MAAM,EAAE;QACXhF,aAAa,CAACa,IAAI,CAAC;UACjBnB,IAAI,EAAER,kBAAkB,CAACgG,kBAAkB;UAC3CnE,WAAW,EACT,GAAAnB,MAAA,CAAGuD,OAAO,CAACnC,IAAI,OAAApB,MAAA,CAAI+E,UAAQ,CAAC3D,IAAI,8BAAApB,MAAA,CAC7BuF,MAAM,CAACR,UAAQ,CAACjF,IAAI,CAAC,UAAAE,MAAA,CAAOuF,MAAM,CAACb,QAAQ,CAAC5E,IAAI,CAAC;QACxD,CAAC,CAAC;MACJ;IACF;EAAC,SAAAuB,GAAA;IAAAmG,WAAA,CAAAlG,CAAA,CAAAD,GAAA;EAAA;IAAAmG,WAAA,CAAAjG,CAAA;EAAA;EAED,OAAOnB,aAAa;AACtB;AAEA,SAASuH,cAAcA,CAACpE,OAAO,EAAEwB,QAAQ,EAAEL,QAAQ,EAAE;EACnD,IAAMtE,aAAa,GAAG,EAAE;EACxB,IAAM0B,QAAQ,GAAGxB,IAAI,CAACyE,QAAQ,CAAChD,IAAI,EAAE2C,QAAQ,CAAC3C,IAAI,CAAC;EAAC,IAAA8F,WAAA,GAAApH,0BAAA,CAE/BqB,QAAQ,CAACpB,OAAO;IAAAoH,OAAA;EAAA;IAArC,KAAAD,WAAA,CAAAjH,CAAA,MAAAkH,OAAA,GAAAD,WAAA,CAAAhH,CAAA,IAAAC,IAAA,GAAuC;MAAA,IAA5ByB,MAAM,GAAAuF,OAAA,CAAA9G,KAAA;MACfZ,aAAa,CAACa,IAAI,CAAC;QACjBnB,IAAI,EAAER,kBAAkB,CAACyI,WAAW;QACpC5G,WAAW,KAAAnB,MAAA,CAAKuD,OAAO,CAACnC,IAAI,OAAApB,MAAA,CAAI+E,QAAQ,CAAC3D,IAAI,WAAApB,MAAA,CAAQuC,MAAM,CAACnB,IAAI;MAClE,CAAC,CAAC;IACJ;EAAC,SAAAC,GAAA;IAAAwG,WAAA,CAAAvG,CAAA,CAAAD,GAAA;EAAA;IAAAwG,WAAA,CAAAtG,CAAA;EAAA;EAAA,IAAAyG,WAAA,GAAAvH,0BAAA,CAE8BqB,QAAQ,CAACL,SAAS;IAAAwG,OAAA;EAAA;IAAjD,KAAAD,WAAA,CAAApH,CAAA,MAAAqH,OAAA,GAAAD,WAAA,CAAAnH,CAAA,IAAAC,IAAA,GAAmD;MAAA,IAAAoH,aAAA,GAAAtG,cAAA,CAAAqG,OAAA,CAAAjH,KAAA;QAAvCuB,OAAM,GAAA2F,aAAA;QAAE/F,MAAM,GAAA+F,aAAA;MACxB,IAAM9C,MAAM,GAAGC,yCAAyC,CACtD9C,OAAM,CAACzC,IAAI,EACXqC,MAAM,CAACrC,IAAI,CACZ;MAED,IAAI,CAACsF,MAAM,EAAE;QACXhF,aAAa,CAACa,IAAI,CAAC;UACjBnB,IAAI,EAAER,kBAAkB,CAAC6I,gBAAgB;UACzChH,WAAW,EACT,GAAAnB,MAAA,CAAGuD,OAAO,CAACnC,IAAI,OAAApB,MAAA,CAAI+E,QAAQ,CAAC3D,IAAI,WAAApB,MAAA,CAAQuC,OAAM,CAACnB,IAAI,kCAAApB,MAAA,CAChDuF,MAAM,CAAChD,OAAM,CAACzC,IAAI,CAAC,UAAAE,MAAA,CAAOuF,MAAM,CAACpD,MAAM,CAACrC,IAAI,CAAC;QACpD,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIyC,OAAM,CAAC6F,YAAY,KAAKC,SAAS,EAAE;QAC5C,IAAIlG,MAAM,CAACiG,YAAY,KAAKC,SAAS,EAAE;UACrCjI,aAAa,CAACa,IAAI,CAAC;YACjBnB,IAAI,EAAEP,mBAAmB,CAAC+I,wBAAwB;YAClDnH,WAAW,KAAAnB,MAAA,CAAKuD,OAAO,CAACnC,IAAI,OAAApB,MAAA,CAAI+E,QAAQ,CAAC3D,IAAI,WAAApB,MAAA,CAAQuC,OAAM,CAACnB,IAAI;UAClE,CAAC,CAAC;QACJ,CAAC,MAAM;UACL;UACA;UACA;UACA,IAAMmH,WAAW,GAAGC,cAAc,CAACjG,OAAM,CAAC6F,YAAY,EAAE7F,OAAM,CAACzC,IAAI,CAAC;UACpE,IAAM2I,WAAW,GAAGD,cAAc,CAACrG,MAAM,CAACiG,YAAY,EAAEjG,MAAM,CAACrC,IAAI,CAAC;UAEpE,IAAIyI,WAAW,KAAKE,WAAW,EAAE;YAC/BrI,aAAa,CAACa,IAAI,CAAC;cACjBnB,IAAI,EAAEP,mBAAmB,CAAC+I,wBAAwB;cAClDnH,WAAW,KAAAnB,MAAA,CAAKuD,OAAO,CAACnC,IAAI,OAAApB,MAAA,CAAI+E,QAAQ,CAAC3D,IAAI,WAAApB,MAAA,CAAQuC,OAAM,CAACnB,IAAI,qCAAApB,MAAA,CAAkCuI,WAAW,UAAAvI,MAAA,CAAOyI,WAAW;YACjI,CAAC,CAAC;UACJ;QACF;MACF;IACF;EAAC,SAAApH,GAAA;IAAA2G,WAAA,CAAA1G,CAAA,CAAAD,GAAA;EAAA;IAAA2G,WAAA,CAAAzG,CAAA;EAAA;EAAA,IAAAmH,WAAA,GAAAjI,0BAAA,CAEoBqB,QAAQ,CAACG,KAAK;IAAA0G,OAAA;EAAA;IAAnC,KAAAD,WAAA,CAAA9H,CAAA,MAAA+H,OAAA,GAAAD,WAAA,CAAA7H,CAAA,IAAAC,IAAA,GAAqC;MAAA,IAA1BqB,OAAM,GAAAwG,OAAA,CAAA3H,KAAA;MACf,IAAIjC,kBAAkB,CAACoD,OAAM,CAAC,EAAE;QAC9B/B,aAAa,CAACa,IAAI,CAAC;UACjBnB,IAAI,EAAER,kBAAkB,CAACsJ,kBAAkB;UAC3CzH,WAAW,oBAAAnB,MAAA,CAAoBmC,OAAM,CAACf,IAAI,UAAApB,MAAA,CAAOuD,OAAO,CAACnC,IAAI,OAAApB,MAAA,CAAI+E,QAAQ,CAAC3D,IAAI;QAChF,CAAC,CAAC;MACJ,CAAC,MAAM;QACLhB,aAAa,CAACa,IAAI,CAAC;UACjBnB,IAAI,EAAEP,mBAAmB,CAACsJ,kBAAkB;UAC5C1H,WAAW,qBAAAnB,MAAA,CAAqBmC,OAAM,CAACf,IAAI,UAAApB,MAAA,CAAOuD,OAAO,CAACnC,IAAI,OAAApB,MAAA,CAAI+E,QAAQ,CAAC3D,IAAI;QACjF,CAAC,CAAC;MACJ;IACF;EAAC,SAAAC,GAAA;IAAAqH,WAAA,CAAApH,CAAA,CAAAD,GAAA;EAAA;IAAAqH,WAAA,CAAAnH,CAAA;EAAA;EAED,OAAOnB,aAAa;AACtB;AAEA,SAASwH,qCAAqCA,CAACrE,OAAO,EAAEK,OAAO,EAAE;EAC/D,IAAIjF,UAAU,CAAC4E,OAAO,CAAC,EAAE;IACvB;MACE;MACC5E,UAAU,CAACiF,OAAO,CAAC,IAClBgE,qCAAqC,CACnCrE,OAAO,CAACuF,MAAM,EACdlF,OAAO,CAACkF,MAAM,CACf;MAAK;MACPjK,aAAa,CAAC+E,OAAO,CAAC,IACrBgE,qCAAqC,CAACrE,OAAO,EAAEK,OAAO,CAACkF,MAAM;IAAE;EAErE;EAEA,IAAIjK,aAAa,CAAC0E,OAAO,CAAC,EAAE;IAC1B;IACA,OACE1E,aAAa,CAAC+E,OAAO,CAAC,IACtBgE,qCAAqC,CAACrE,OAAO,CAACuF,MAAM,EAAElF,OAAO,CAACkF,MAAM,CAAC;EAEzE;EAEA;IACE;IACClK,WAAW,CAACgF,OAAO,CAAC,IAAIL,OAAO,CAACnC,IAAI,KAAKwC,OAAO,CAACxC,IAAI;IAAK;IAC1DvC,aAAa,CAAC+E,OAAO,CAAC,IACrBgE,qCAAqC,CAACrE,OAAO,EAAEK,OAAO,CAACkF,MAAM;EAAE;AAErE;AAEA,SAASzD,yCAAyCA,CAAC9B,OAAO,EAAEK,OAAO,EAAE;EACnE,IAAIjF,UAAU,CAAC4E,OAAO,CAAC,EAAE;IACvB;IACA,OACE5E,UAAU,CAACiF,OAAO,CAAC,IACnByB,yCAAyC,CAAC9B,OAAO,CAACuF,MAAM,EAAElF,OAAO,CAACkF,MAAM,CAAC;EAE7E;EAEA,IAAIjK,aAAa,CAAC0E,OAAO,CAAC,EAAE;IAC1B;MACE;MACA;MACC1E,aAAa,CAAC+E,OAAO,CAAC,IACrByB,yCAAyC,CACvC9B,OAAO,CAACuF,MAAM,EACdlF,OAAO,CAACkF,MAAM,CACf;MAAK;MACP,CAACjK,aAAa,CAAC+E,OAAO,CAAC,IACtByB,yCAAyC,CAAC9B,OAAO,CAACuF,MAAM,EAAElF,OAAO;IAAE;EAEzE,CAAC,CAAC;;EAEF,OAAOhF,WAAW,CAACgF,OAAO,CAAC,IAAIL,OAAO,CAACnC,IAAI,KAAKwC,OAAO,CAACxC,IAAI;AAC9D;AAEA,SAASiD,YAAYA,CAACvE,IAAI,EAAE;EAC1B,IAAIb,YAAY,CAACa,IAAI,CAAC,EAAE;IACtB,OAAO,eAAe;EACxB;EAEA,IAAIhB,YAAY,CAACgB,IAAI,CAAC,EAAE;IACtB,OAAO,gBAAgB;EACzB;EAEA,IAAIpB,eAAe,CAACoB,IAAI,CAAC,EAAE;IACzB,OAAO,mBAAmB;EAC5B;EAEA,IAAIZ,WAAW,CAACY,IAAI,CAAC,EAAE;IACrB,OAAO,cAAc;EACvB;EAEA,IAAItB,UAAU,CAACsB,IAAI,CAAC,EAAE;IACpB,OAAO,cAAc;EACvB;EAEA,IAAIrB,iBAAiB,CAACqB,IAAI,CAAC,EAAE;IAC3B,OAAO,eAAe;EACxB;EACA;EACA;;EAEA,KAAK,IAAIzB,SAAS,CAAC,KAAK,EAAE,mBAAmB,GAAGD,OAAO,CAAC0B,IAAI,CAAC,CAAC;AAChE;AAEA,SAAS0I,cAAcA,CAACxH,KAAK,EAAElB,IAAI,EAAE;EACnC,IAAMiJ,GAAG,GAAG3J,YAAY,CAAC4B,KAAK,EAAElB,IAAI,CAAC;EACrCiJ,GAAG,IAAI,IAAI,IAAI1K,SAAS,CAAC,KAAK,CAAC;EAC/B,OAAOE,KAAK,CAACc,aAAa,CAAC0J,GAAG,CAAC,CAAC;AAClC;AAEA,SAASzI,IAAIA,CAAC0I,QAAQ,EAAEC,QAAQ,EAAE;EAChC,IAAMhH,KAAK,GAAG,EAAE;EAChB,IAAMvB,OAAO,GAAG,EAAE;EAClB,IAAMe,SAAS,GAAG,EAAE;EACpB,IAAMyH,MAAM,GAAG5K,MAAM,CAAC0K,QAAQ,EAAE,UAAAG,IAAA;IAAA,IAAG/H,IAAI,GAAA+H,IAAA,CAAJ/H,IAAI;IAAA,OAAOA,IAAI;EAAA,EAAC;EACnD,IAAMgI,MAAM,GAAG9K,MAAM,CAAC2K,QAAQ,EAAE,UAAAI,KAAA;IAAA,IAAGjI,IAAI,GAAAiI,KAAA,CAAJjI,IAAI;IAAA,OAAOA,IAAI;EAAA,EAAC;EAAC,IAAAkI,WAAA,GAAA7I,0BAAA,CAE9BuI,QAAQ;IAAAO,OAAA;EAAA;IAA9B,KAAAD,WAAA,CAAA1I,CAAA,MAAA2I,OAAA,GAAAD,WAAA,CAAAzI,CAAA,IAAAC,IAAA,GAAgC;MAAA,IAArB0I,OAAO,GAAAD,OAAA,CAAAvI,KAAA;MAChB,IAAMyI,OAAO,GAAGL,MAAM,CAACI,OAAO,CAACpI,IAAI,CAAC;MAEpC,IAAIqI,OAAO,KAAKpB,SAAS,EAAE;QACzB3H,OAAO,CAACO,IAAI,CAACuI,OAAO,CAAC;MACvB,CAAC,MAAM;QACL/H,SAAS,CAACR,IAAI,CAAC,CAACuI,OAAO,EAAEC,OAAO,CAAC,CAAC;MACpC;IACF;EAAC,SAAApI,GAAA;IAAAiI,WAAA,CAAAhI,CAAA,CAAAD,GAAA;EAAA;IAAAiI,WAAA,CAAA/H,CAAA;EAAA;EAAA,IAAAmI,WAAA,GAAAjJ,0BAAA,CAEqBwI,QAAQ;IAAAU,OAAA;EAAA;IAA9B,KAAAD,WAAA,CAAA9I,CAAA,MAAA+I,OAAA,GAAAD,WAAA,CAAA7I,CAAA,IAAAC,IAAA,GAAgC;MAAA,IAArB2I,QAAO,GAAAE,OAAA,CAAA3I,KAAA;MAChB,IAAIkI,MAAM,CAACO,QAAO,CAACrI,IAAI,CAAC,KAAKiH,SAAS,EAAE;QACtCpG,KAAK,CAAChB,IAAI,CAACwI,QAAO,CAAC;MACrB;IACF;EAAC,SAAApI,GAAA;IAAAqI,WAAA,CAAApI,CAAA,CAAAD,GAAA;EAAA;IAAAqI,WAAA,CAAAnI,CAAA;EAAA;EAED,OAAO;IACLU,KAAK,EAALA,KAAK;IACLR,SAAS,EAATA,SAAS;IACTf,OAAO,EAAPA;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}