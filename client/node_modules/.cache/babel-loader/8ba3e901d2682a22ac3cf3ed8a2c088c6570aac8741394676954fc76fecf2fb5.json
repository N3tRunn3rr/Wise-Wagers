{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nexport function setContext(setter) {\n  return new ApolloLink(function (operation, forward) {\n    var request = __rest(operation, []);\n    return new Observable(function (observer) {\n      var handle;\n      var closed = false;\n      Promise.resolve(request).then(function (req) {\n        return setter(req, operation.getContext());\n      }).then(operation.setContext).then(function () {\n        if (closed) return;\n        handle = forward(operation).subscribe({\n          next: observer.next.bind(observer),\n          error: observer.error.bind(observer),\n          complete: observer.complete.bind(observer)\n        });\n      }).catch(observer.error.bind(observer));\n      return function () {\n        closed = true;\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}","map":{"version":3,"names":["ApolloLink","Observable","setContext","setter","operation","forward","request","__rest","observer","handle","closed","Promise","resolve","then","req","getContext","subscribe","next","bind","error","complete","catch","unsubscribe"],"sources":["/Users/kenjifleming/course-challenges/Perfect-Parlay/perfect-parlay/client/node_modules/@apollo/src/link/context/index.ts"],"sourcesContent":["import { ApolloLink, Operation, GraphQLRequest, NextLink } from '../core';\nimport { Observable, ObservableSubscription } from '../../utilities';\nimport { DefaultContext } from '../../core';\n\nexport type ContextSetter = (\n  operation: GraphQLRequest,\n  prevContext: DefaultContext,\n) => Promise<DefaultContext> | DefaultContext;\n\nexport function setContext(setter: ContextSetter): ApolloLink {\n  return new ApolloLink((operation: Operation, forward: NextLink) => {\n    const { ...request } = operation;\n\n    return new Observable(observer => {\n      let handle: ObservableSubscription;\n      let closed = false;\n      Promise.resolve(request)\n        .then(req => setter(req, operation.getContext()))\n        .then(operation.setContext)\n        .then(() => {\n          // if the observer is already closed, no need to subscribe.\n          if (closed) return;\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        closed = true;\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAA6C,kBAAU;AAC1E,SAASC,UAAU,QAAgC,0BAAkB;AAQrE,OAAM,SAAUC,UAAUA,CAACC,MAAqB;EAC9C,OAAO,IAAIH,UAAU,CAAC,UAACI,SAAoB,EAAEC,OAAiB;IAC5D,IAAWC,OAAO,GAAAC,MAAA,CAAKH,SAAS,EAA1B,EAAc,CAAY;IAEhC,OAAO,IAAIH,UAAU,CAAC,UAAAO,QAAQ;MAC5B,IAAIC,MAA8B;MAClC,IAAIC,MAAM,GAAG,KAAK;MAClBC,OAAO,CAACC,OAAO,CAACN,OAAO,CAAC,CACrBO,IAAI,CAAC,UAAAC,GAAG;QAAI,OAAAX,MAAM,CAACW,GAAG,EAAEV,SAAS,CAACW,UAAU,EAAE,CAAC;MAAnC,CAAmC,CAAC,CAChDF,IAAI,CAACT,SAAS,CAACF,UAAU,CAAC,CAC1BW,IAAI,CAAC;QAEJ,IAAIH,MAAM,EAAE;QACZD,MAAM,GAAGJ,OAAO,CAACD,SAAS,CAAC,CAACY,SAAS,CAAC;UACpCC,IAAI,EAAET,QAAQ,CAACS,IAAI,CAACC,IAAI,CAACV,QAAQ,CAAC;UAClCW,KAAK,EAAEX,QAAQ,CAACW,KAAK,CAACD,IAAI,CAACV,QAAQ,CAAC;UACpCY,QAAQ,EAAEZ,QAAQ,CAACY,QAAQ,CAACF,IAAI,CAACV,QAAQ;SAC1C,CAAC;MACJ,CAAC,CAAC,CACDa,KAAK,CAACb,QAAQ,CAACW,KAAK,CAACD,IAAI,CAACV,QAAQ,CAAC,CAAC;MAEvC,OAAO;QACLE,MAAM,GAAG,IAAI;QACb,IAAID,MAAM,EAAEA,MAAM,CAACa,WAAW,EAAE;MAClC,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}