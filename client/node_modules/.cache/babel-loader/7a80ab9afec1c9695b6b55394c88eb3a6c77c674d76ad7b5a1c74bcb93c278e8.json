{"ast":null,"code":"import _slicedToArray from \"/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isRequiredArgument, isType } from '../../type/definition.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nexport function ProvidedRequiredArgumentsRule(context) {\n  return _objectSpread(_objectSpread({}, ProvidedRequiredArgumentsOnDirectivesRule(context)), {}, {\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(fieldNode) {\n        var _fieldNode$arguments;\n        var fieldDef = context.getFieldDef();\n        if (!fieldDef) {\n          return false;\n        }\n        var providedArgs = new Set(\n        // FIXME: https://github.com/graphql/graphql-js/issues/2203\n        /* c8 ignore next */\n        (_fieldNode$arguments = fieldNode.arguments) === null || _fieldNode$arguments === void 0 ? void 0 : _fieldNode$arguments.map(function (arg) {\n          return arg.name.value;\n        }));\n        var _iterator = _createForOfIteratorHelper(fieldDef.args),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var argDef = _step.value;\n            if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {\n              var argTypeStr = inspect(argDef.type);\n              context.reportError(new GraphQLError(\"Field \\\"\".concat(fieldDef.name, \"\\\" argument \\\"\").concat(argDef.name, \"\\\" of type \\\"\").concat(argTypeStr, \"\\\" is required, but it was not provided.\"), {\n                nodes: fieldNode\n              }));\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  });\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n  var requiredArgsMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = (_schema$getDirectives = schema === null || schema === void 0 ? void 0 : schema.getDirectives()) !== null && _schema$getDirectives !== void 0 ? _schema$getDirectives : specifiedDirectives;\n  var _iterator2 = _createForOfIteratorHelper(definedDirectives),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var directive = _step2.value;\n      requiredArgsMap[directive.name] = keyMap(directive.args.filter(isRequiredArgument), function (arg) {\n        return arg.name;\n      });\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  var astDefinitions = context.getDocument().definitions;\n  var _iterator3 = _createForOfIteratorHelper(astDefinitions),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var def = _step3.value;\n      if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        var _def$arguments;\n\n        // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n        /* c8 ignore next */\n        var argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];\n        requiredArgsMap[def.name.value] = keyMap(argNodes.filter(isRequiredArgumentNode), function (arg) {\n          return arg.name.value;\n        });\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(directiveNode) {\n        var directiveName = directiveNode.name.value;\n        var requiredArgs = requiredArgsMap[directiveName];\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n          /* c8 ignore next */\n          var argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];\n          var argNodeMap = new Set(argNodes.map(function (arg) {\n            return arg.name.value;\n          }));\n          for (var _i = 0, _Object$entries = Object.entries(requiredArgs); _i < _Object$entries.length; _i++) {\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n              argName = _Object$entries$_i[0],\n              argDef = _Object$entries$_i[1];\n            if (!argNodeMap.has(argName)) {\n              var argType = isType(argDef.type) ? inspect(argDef.type) : print(argDef.type);\n              context.reportError(new GraphQLError(\"Directive \\\"@\".concat(directiveName, \"\\\" argument \\\"\").concat(argName, \"\\\" of type \\\"\").concat(argType, \"\\\" is required, but it was not provided.\"), {\n                nodes: directiveNode\n              }));\n            }\n          }\n        }\n      }\n    }\n  };\n}\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}","map":{"version":3,"names":["inspect","keyMap","GraphQLError","Kind","print","isRequiredArgument","isType","specifiedDirectives","ProvidedRequiredArgumentsRule","context","_objectSpread","ProvidedRequiredArgumentsOnDirectivesRule","Field","leave","fieldNode","_fieldNode$arguments","fieldDef","getFieldDef","providedArgs","Set","arguments","map","arg","name","value","_iterator","_createForOfIteratorHelper","args","_step","s","n","done","argDef","has","argTypeStr","type","reportError","concat","nodes","err","e","f","_schema$getDirectives","requiredArgsMap","Object","create","schema","getSchema","definedDirectives","getDirectives","_iterator2","_step2","directive","filter","astDefinitions","getDocument","definitions","_iterator3","_step3","def","kind","DIRECTIVE_DEFINITION","_def$arguments","argNodes","isRequiredArgumentNode","Directive","directiveNode","directiveName","requiredArgs","_directiveNode$argume","argNodeMap","_i","_Object$entries","entries","length","_Object$entries$_i","_slicedToArray","argName","argType","NON_NULL_TYPE","defaultValue"],"sources":["/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs"],"sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isRequiredArgument, isType } from '../../type/definition.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nexport function ProvidedRequiredArgumentsRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...ProvidedRequiredArgumentsOnDirectivesRule(context),\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        const providedArgs = new Set( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n          /* c8 ignore next */\n          (_fieldNode$arguments = fieldNode.arguments) === null ||\n          _fieldNode$arguments === void 0\n            ? void 0\n            : _fieldNode$arguments.map((arg) => arg.name.value),\n        );\n\n        for (const argDef of fieldDef.args) {\n          if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {\n            const argTypeStr = inspect(argDef.type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldDef.name}\" argument \"${argDef.name}\" of type \"${argTypeStr}\" is required, but it was not provided.`,\n                {\n                  nodes: fieldNode,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n\n  const requiredArgsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives =\n    (_schema$getDirectives =\n      schema === null || schema === void 0\n        ? void 0\n        : schema.getDirectives()) !== null && _schema$getDirectives !== void 0\n      ? _schema$getDirectives\n      : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    requiredArgsMap[directive.name] = keyMap(\n      directive.args.filter(isRequiredArgument),\n      (arg) => arg.name,\n    );\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      requiredArgsMap[def.name.value] = keyMap(\n        argNodes.filter(isRequiredArgumentNode),\n        (arg) => arg.name.value,\n      );\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveNode) {\n        const directiveName = directiveNode.name.value;\n        const requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n          /* c8 ignore next */\n          const argNodes =\n            (_directiveNode$argume = directiveNode.arguments) !== null &&\n            _directiveNode$argume !== void 0\n              ? _directiveNode$argume\n              : [];\n          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));\n\n          for (const [argName, argDef] of Object.entries(requiredArgs)) {\n            if (!argNodeMap.has(argName)) {\n              const argType = isType(argDef.type)\n                ? inspect(argDef.type)\n                : print(argDef.type);\n              context.reportError(\n                new GraphQLError(\n                  `Directive \"@${directiveName}\" argument \"${argName}\" of type \"${argType}\" is required, but it was not provided.`,\n                  {\n                    nodes: directiveNode,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}