{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n    var _iterator = _createForOfIteratorHelper(operationTypesNodes),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var operationType = _step.value;\n        var operation = operationType.operation;\n        var alreadyDefinedOperationType = definedOperationTypes[operation];\n        if (existingOperationTypes[operation]) {\n          context.reportError(new GraphQLError(\"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\"), {\n            nodes: operationType\n          }));\n        } else if (alreadyDefinedOperationType) {\n          context.reportError(new GraphQLError(\"There can be only one \".concat(operation, \" type in schema.\"), {\n            nodes: [alreadyDefinedOperationType, operationType]\n          }));\n        } else {\n          definedOperationTypes[operation] = operationType;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["GraphQLError","UniqueOperationTypesRule","context","schema","getSchema","definedOperationTypes","Object","create","existingOperationTypes","query","getQueryType","mutation","getMutationType","subscription","getSubscriptionType","SchemaDefinition","checkOperationTypes","SchemaExtension","node","_node$operationTypes","operationTypesNodes","operationTypes","_iterator","_createForOfIteratorHelper","_step","s","n","done","operationType","value","operation","alreadyDefinedOperationType","reportError","concat","nodes","err","e","f"],"sources":["/Users/kenjifleming/course-challenges/wise-wager/Wise-Wagers/client/node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema\n    ? {\n        query: schema.getQueryType(),\n        mutation: schema.getMutationType(),\n        subscription: schema.getSubscriptionType(),\n      }\n    : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes,\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const operationTypesNodes =\n      (_node$operationTypes = node.operationTypes) !== null &&\n      _node$operationTypes !== void 0\n        ? _node$operationTypes\n        : [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(\n          new GraphQLError(\n            `Type for ${operation} already defined in the schema. It cannot be redefined.`,\n            {\n              nodes: operationType,\n            },\n          ),\n        );\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one ${operation} type in schema.`,\n            {\n              nodes: [alreadyDefinedOperationType, operationType],\n            },\n          ),\n        );\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,8BAA8B;;AAE3D;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACC,OAAO,EAAE;EAChD,IAAMC,MAAM,GAAGD,OAAO,CAACE,SAAS,EAAE;EAClC,IAAMC,qBAAqB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACjD,IAAMC,sBAAsB,GAAGL,MAAM,GACjC;IACEM,KAAK,EAAEN,MAAM,CAACO,YAAY,EAAE;IAC5BC,QAAQ,EAAER,MAAM,CAACS,eAAe,EAAE;IAClCC,YAAY,EAAEV,MAAM,CAACW,mBAAmB;EAC1C,CAAC,GACD,CAAC,CAAC;EACN,OAAO;IACLC,gBAAgB,EAAEC,mBAAmB;IACrCC,eAAe,EAAED;EACnB,CAAC;EAED,SAASA,mBAAmBA,CAACE,IAAI,EAAE;IACjC,IAAIC,oBAAoB;;IAExB;;IAEA;IACA,IAAMC,mBAAmB,GACvB,CAACD,oBAAoB,GAAGD,IAAI,CAACG,cAAc,MAAM,IAAI,IACrDF,oBAAoB,KAAK,KAAK,CAAC,GAC3BA,oBAAoB,GACpB,EAAE;IAAC,IAAAG,SAAA,GAAAC,0BAAA,CAEmBH,mBAAmB;MAAAI,KAAA;IAAA;MAA/C,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAiD;QAAA,IAAtCC,aAAa,GAAAJ,KAAA,CAAAK,KAAA;QACtB,IAAMC,SAAS,GAAGF,aAAa,CAACE,SAAS;QACzC,IAAMC,2BAA2B,GAAG1B,qBAAqB,CAACyB,SAAS,CAAC;QAEpE,IAAItB,sBAAsB,CAACsB,SAAS,CAAC,EAAE;UACrC5B,OAAO,CAAC8B,WAAW,CACjB,IAAIhC,YAAY,aAAAiC,MAAA,CACFH,SAAS,8DACrB;YACEI,KAAK,EAAEN;UACT,CAAC,CACF,CACF;QACH,CAAC,MAAM,IAAIG,2BAA2B,EAAE;UACtC7B,OAAO,CAAC8B,WAAW,CACjB,IAAIhC,YAAY,0BAAAiC,MAAA,CACWH,SAAS,uBAClC;YACEI,KAAK,EAAE,CAACH,2BAA2B,EAAEH,aAAa;UACpD,CAAC,CACF,CACF;QACH,CAAC,MAAM;UACLvB,qBAAqB,CAACyB,SAAS,CAAC,GAAGF,aAAa;QAClD;MACF;IAAC,SAAAO,GAAA;MAAAb,SAAA,CAAAc,CAAA,CAAAD,GAAA;IAAA;MAAAb,SAAA,CAAAe,CAAA;IAAA;IAED,OAAO,KAAK;EACd;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}