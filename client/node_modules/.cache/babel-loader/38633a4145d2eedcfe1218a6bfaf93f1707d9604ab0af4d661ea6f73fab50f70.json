{"ast":null,"code":"import _slicedToArray from \"/Users/kenjifleming/course-challenges/Perfect-Parlay/perfect-parlay/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/kenjifleming/course-challenges/Perfect-Parlay/perfect-parlay/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nexport function UniqueVariableNamesRule(context) {\n  return {\n    OperationDefinition: function OperationDefinition(operationNode) {\n      var _operationNode$variab;\n\n      // See: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      var variableDefinitions = (_operationNode$variab = operationNode.variableDefinitions) !== null && _operationNode$variab !== void 0 ? _operationNode$variab : [];\n      var seenVariableDefinitions = groupBy(variableDefinitions, function (node) {\n        return node.variable.name.value;\n      });\n      var _iterator = _createForOfIteratorHelper(seenVariableDefinitions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            variableName = _step$value[0],\n            variableNodes = _step$value[1];\n          if (variableNodes.length > 1) {\n            context.reportError(new GraphQLError(\"There can be only one variable named \\\"$\".concat(variableName, \"\\\".\"), {\n              nodes: variableNodes.map(function (node) {\n                return node.variable.name;\n              })\n            }));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  };\n}","map":{"version":3,"names":["groupBy","GraphQLError","UniqueVariableNamesRule","context","OperationDefinition","operationNode","_operationNode$variab","variableDefinitions","seenVariableDefinitions","node","variable","name","value","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","_slicedToArray","variableName","variableNodes","length","reportError","concat","nodes","map","err","e","f"],"sources":["/Users/kenjifleming/course-challenges/Perfect-Parlay/perfect-parlay/client/node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs"],"sourcesContent":["import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nexport function UniqueVariableNamesRule(context) {\n  return {\n    OperationDefinition(operationNode) {\n      var _operationNode$variab;\n\n      // See: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const variableDefinitions =\n        (_operationNode$variab = operationNode.variableDefinitions) !== null &&\n        _operationNode$variab !== void 0\n          ? _operationNode$variab\n          : [];\n      const seenVariableDefinitions = groupBy(\n        variableDefinitions,\n        (node) => node.variable.name.value,\n      );\n\n      for (const [variableName, variableNodes] of seenVariableDefinitions) {\n        if (variableNodes.length > 1) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one variable named \"$${variableName}\".`,\n              {\n                nodes: variableNodes.map((node) => node.variable.name),\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n"],"mappings":";;AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,YAAY,QAAQ,8BAA8B;;AAE3D;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuBA,CAACC,OAAO,EAAE;EAC/C,OAAO;IACLC,mBAAmB,WAAAA,oBAACC,aAAa,EAAE;MACjC,IAAIC,qBAAqB;;MAEzB;;MAEA;MACA,IAAMC,mBAAmB,GACvB,CAACD,qBAAqB,GAAGD,aAAa,CAACE,mBAAmB,MAAM,IAAI,IACpED,qBAAqB,KAAK,KAAK,CAAC,GAC5BA,qBAAqB,GACrB,EAAE;MACR,IAAME,uBAAuB,GAAGR,OAAO,CACrCO,mBAAmB,EACnB,UAACE,IAAI;QAAA,OAAKA,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK;MAAA,EACnC;MAAC,IAAAC,SAAA,GAAAC,0BAAA,CAE0CN,uBAAuB;QAAAO,KAAA;MAAA;QAAnE,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAqE;UAAA,IAAAC,WAAA,GAAAC,cAAA,CAAAL,KAAA,CAAAH,KAAA;YAAzDS,YAAY,GAAAF,WAAA;YAAEG,aAAa,GAAAH,WAAA;UACrC,IAAIG,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;YAC5BpB,OAAO,CAACqB,WAAW,CACjB,IAAIvB,YAAY,4CAAAwB,MAAA,CAC4BJ,YAAY,UACtD;cACEK,KAAK,EAAEJ,aAAa,CAACK,GAAG,CAAC,UAAClB,IAAI;gBAAA,OAAKA,IAAI,CAACC,QAAQ,CAACC,IAAI;cAAA;YACvD,CAAC,CACF,CACF;UACH;QACF;MAAC,SAAAiB,GAAA;QAAAf,SAAA,CAAAgB,CAAA,CAAAD,GAAA;MAAA;QAAAf,SAAA,CAAAiB,CAAA;MAAA;IACH;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}