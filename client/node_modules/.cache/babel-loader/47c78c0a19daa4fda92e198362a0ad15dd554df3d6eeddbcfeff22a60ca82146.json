{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/kenjifleming/course-challenges/Perfect-Parlay/perfect-parlay/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { isPromise } from './isPromise.mjs';\n\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\nexport function promiseReduce(values, callbackFn, initialValue) {\n  var accumulator = initialValue;\n  var _iterator = _createForOfIteratorHelper(values),\n    _step;\n  try {\n    var _loop = function _loop() {\n      var value = _step.value;\n      accumulator = isPromise(accumulator) ? accumulator.then(function (resolved) {\n        return callbackFn(resolved, value);\n      }) : callbackFn(accumulator, value);\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return accumulator;\n}","map":{"version":3,"names":["isPromise","promiseReduce","values","callbackFn","initialValue","accumulator","_iterator","_createForOfIteratorHelper","_step","_loop","value","then","resolved","s","n","done","err","e","f"],"sources":["/Users/kenjifleming/course-challenges/Perfect-Parlay/perfect-parlay/client/node_modules/graphql/jsutils/promiseReduce.mjs"],"sourcesContent":["import { isPromise } from './isPromise.mjs';\n\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\nexport function promiseReduce(values, callbackFn, initialValue) {\n  let accumulator = initialValue;\n\n  for (const value of values) {\n    accumulator = isPromise(accumulator)\n      ? accumulator.then((resolved) => callbackFn(resolved, value))\n      : callbackFn(accumulator, value);\n  }\n\n  return accumulator;\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,iBAAiB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,MAAM,EAAEC,UAAU,EAAEC,YAAY,EAAE;EAC9D,IAAIC,WAAW,GAAGD,YAAY;EAAC,IAAAE,SAAA,GAAAC,0BAAA,CAEXL,MAAM;IAAAM,KAAA;EAAA;IAAA,IAAAC,KAAA,YAAAA,MAAA,EAAE;MAAA,IAAjBC,KAAK,GAAAF,KAAA,CAAAE,KAAA;MACdL,WAAW,GAAGL,SAAS,CAACK,WAAW,CAAC,GAChCA,WAAW,CAACM,IAAI,CAAC,UAACC,QAAQ;QAAA,OAAKT,UAAU,CAACS,QAAQ,EAAEF,KAAK,CAAC;MAAA,EAAC,GAC3DP,UAAU,CAACE,WAAW,EAAEK,KAAK,CAAC;IACpC,CAAC;IAJD,KAAAJ,SAAA,CAAAO,CAAA,MAAAL,KAAA,GAAAF,SAAA,CAAAQ,CAAA,IAAAC,IAAA;MAAAN,KAAA;IAAA;EAIC,SAAAO,GAAA;IAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;EAAA;IAAAV,SAAA,CAAAY,CAAA;EAAA;EAED,OAAOb,WAAW;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}